# This file includes all the entitites for EV Charger.
# Old depreceated code exists as: depreceated/charger.yaml

# We keep track of basic data for consumption and cost (without any reducation from Tibber and electrical distribution-reduction).

# Updates made for Core updates and breaking changes:
# --------------------------------------------------------
# 20221108 - Clear to upgrade to 2022.6.7 from 2022.5.3: https://www.home-assistant.io/blog/2022/06/01/release-20226/#breaking-changes Template filter/function defaults

input_number:
  evcharger_consumption_hour_snapshot_persistent:
    name: 'Persistence for evcharger_consumption_hour_snapshot'
    icon: mdi:database
    mode: box
    min: 0
    max: 10000000

input_text:
  evcharger_consumption_sensor:
    name: 'Name of sensor for EV-charger consumption (full name)'
    icon: mdi:ev-station

template:
  - trigger:
      # Trigger at the end of every hour, since we want the sensor value to be set for the hour (since this is a state/event driven platform).
      # 20221024: Changed from 59.59 to 59.58 to allow some further yaml to be executed 59.59 each hour.
      - platform: time_pattern
        hours: "/1"
        minutes: "59"
        seconds: "58"
    sensor:
      # First we get the EV-charger consumption from the last snapshot (delta) to set the consumption for the hour.
      # We will therefore not capture the last second for the hour, but the second will not be 'lost' until as we set the new snapshot directly after this.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      # 20221110: We increase decimals from 2 to 5, so we decrease the chance that a value is the same across hours, i.e. no state change (yes, can happen with 2 digits).
      - name: evcharger_consumption_hour
        device_class: 'energy'
        unit_of_measurement: 'kWh'
        state_class: measurement
        state: >
          {% set persistent_snapshot = states('input_number.evcharger_consumption_hour_snapshot_persistent') %}
          {% set old_snapshot = states('sensor.evcharger_consumption_hour_snapshot') %}
          {% set new_snapshot = states(states('input_text.evcharger_consumption_sensor')) %}
          {% set snapshots_valid = true %}
          {% set result = 0 %}
          {% if (old_snapshot == 'unknown' or old_snapshot == 'unavailable') %}
          {%   if (persistent_snapshot == 'unknown' or persistent_snapshot == 'unavailable' or persistent_snapshot == 0) %}
          {%     set snapshots_valid = false %}
          {%   else %}
          {%      set old_snapshot = float(persistent_snapshot, 0) %}
          {%   endif %}
          {% else %}
          {%   set old_snapshot = float(old_snapshot, 0) %}
          {% endif %}
          {% if (new_snapshot == 'unknown' or new_snapshot == 'unavailable') %}
          {%   set snapshots_valid = false %}
          {% else %}
          {%   set new_snapshot = float(new_snapshot, 0) %}
          {% endif %}
          {% if (snapshots_valid == true) %}
          {%  set result = (new_snapshot - old_snapshot) | round(5, default=0) %}
          {% endif %}
          {{ result }}

      # Then we calculate the consumption and distribution cost for the hour.
      - name: evcharger_consumption_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set delta = states('sensor.evcharger_consumption_hour') %}
          {% if (delta == 'unknown' or delta == 'unavailable') %}
          {%   set delta = 0 %}
          {% else %}
          {%   set delta = float(delta, 0) %}
          {% endif %}
          {% set rate_distribution = states('sensor.electrical_distribution_rate_summary') %}
          {% if (rate_distribution == 'unknown' or rate_distribution == 'unavailable') %}
          {%   set rate_distribution = 0 %}
          {% else %}
          {%   set rate_distribution = float(rate_distribution, 0) %}
          {% endif %}
          {% set rate_consumption = states('sensor.electrical_consumption_rate_summary') %}
          {% if (rate_consumption == 'unknown' or rate_consumption == 'unavailable') %}
          {%   set rate_consumption = 0 %}
          {% else %}
          {%   set rate_consumption = float(rate_consumption, 0) %}
          {% endif %}
          {% set cost = (delta * ((rate_distribution + rate_consumption))/100) | round(2, default=0) %}
          {{ cost }}

      # Last we set the snapshots.
      - name: evcharger_consumption_hour_snapshot
        device_class: 'energy'
        unit_of_measurement: 'kWh'
        state_class: measurement
        state: >
          {{ states(states('input_text.evcharger_consumption_sensor')) }}

automation:
  # For persistence, On every state change for evcharger_consumption_hour_snapshot, set input_number sensor.
  - id: automation_evcharger_consumption_hour_snapshot
    alias: 'Automation for persistance of evcharger_consumption_hour_snapshot'
    trigger:
      - platform: state
        entity_id: sensor.evcharger_consumption_hour_snapshot
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.evcharger_consumption_hour_snapshot_persistent
        value: "{{ states('sensor.evcharger_consumption_hour_snapshot') }}"