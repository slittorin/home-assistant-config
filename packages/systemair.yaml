# This file includes all the entitites for tracking sensor data for Systemair heat exchanger (VTX).
#
# Works for the Save Connect 2.0 with Systemair VSR 300 and the following firmware (snapshot 20250213):
# Model: VSR 300
# Main board
# SW: 1.22.0
# IAM
# SW: 1.3.0
#
# Note:
# - That I have focused on my current setup, there are more sensors and logic that needs to be applied to cover all types, versions and setups.
# - that I have added some of the sensor register for inputs, but not all. Logic must be verified for each.
#
# The MODBUS-registers and logic is taken from:
# A. https://github.com/cmragnar/HomeAssistant-VSR300-Modbus
# B. And from the javascript on the Save Connect interface reached locally.
# C. https://github.com/perara/python-systemair-saveconnect/blob/master/systemair/saveconnect/register.py
# D. https://shop.systemair.com/upload/assets/SAVE_MODBUS_VARIABLE_LIST_20210301_REV36.PDF?a94f4fe0

# Updates made for Core updates and breaking changes:
# --------------------------------------------------------
# N/A for the moment.

# To be able to easily change the IP for the Save Connect device.
input_text:
  systemair_save_connect_device_ip:
    name: "Domain- or IP-address of the Systemair Save Connect device"
    icon: mdi:hvac

# To be able to choose different types and configurations.
input_select:
  systemair_chosen_unit_type:
    name: Type of Systemair device
    options:
      - Systemair VSR 300
    initial: Systemair VSR 300
    icon: mdi:hvac

template:
  - sensor:
      # This is the configuration array that holds all data to be able to interact with Save Connect.
      # Links to 'systemair_chosen_unit_type'.
      # The configuration array holds all valid registers for the Systemair sensors/functions.
      #
      # All register-addresses seems to be one lower than value in MODBUS variable list.
      #
      # As the Save Connect device seems to be overwhelmed with adding too many registers at once, they are retrieved on priority:
      #   The priorities are
      #     Prio 0: Added every time.
      #     Prio 1 through 3: First 1, then 2 and lastly 3, then over again with 1.
      #
      # Note:
      # - That all priority levels must exist. Thus for instance prio 2 must exists in at least one of the rows.
      # - In total the reponse for each priority must not exceed 4x255 characters.
      - name: Systemair configuration
        unique_id: systemair_configuration
        state: >
          {{ "Systemair configuration" }}
        attributes:
          configuration: >
            {% set json_array = { "Systemair VSR 300": {
                                   "REG_USERMODE_MANUAL_AIRFLOW_LEVEL": { "register": "1130", "prio": "0", "desc": "Fan speed level for mode Manual. Applies to both the supply and the extract air fans." },
                                   "REG_USERMODE_MODE": { "register": "1160", "prio": "0", "desc": "Active user mode." },
                                   "REG_FAN_REGULATION_UNIT": { "register": "1273", "prio": "4", "desc": "Airflow type." }, 
                                   "REG_FAN_MANUAL_STOP_ALLOWED": { "register": "1352", "prio": "4", "desc": "Allow manual fan stop (also as selection for user modes and Week schedule)." },
                                   "REG_FAN_LEVEL_SAF_MIN_PERCENTAGE": { "register": "1400", "prio": "6", "desc": "Minimum supply air fan speed setting, %." },
                                   "REG_FAN_LEVEL_EAF_MIN_PERCENTAGE": { "register": "1401", "prio": "6", "desc": "Minimum extract air fan speed setting, %." },
                                   "REG_FAN_LEVEL_SAF_LOW_PERCENTAGE": { "register": "1402", "prio": "6", "desc": "Low supply air fan speed setting, %." },
                                   "REG_FAN_LEVEL_EAF_LOW_PERCENTAGE": { "register": "1403", "prio": "6", "desc": "Low extract air fan speed setting, %." },
                                   "REG_FAN_LEVEL_SAF_NORMAL_PERCENTAGE": { "register": "1404", "prio": "6", "desc": "Normal supply air fan speed setting, %." },
                                   "REG_FAN_LEVEL_EAF_NORMAL_PERCENTAGE": { "register": "1405", "prio": "6", "desc": "Normal extract air fan speed setting, %." },
                                   "REG_FAN_LEVEL_SAF_HIGH_PERCENTAGE": { "register": "1406", "prio": "7", "desc": "High supply air fan speed setting, %." },
                                   "REG_FAN_LEVEL_EAF_HIGH_PERCENTAGE": { "register": "1407", "prio": "7", "desc": "High extract air fan speed setting, %." },
                                   "REG_FAN_LEVEL_SAF_MAX_PERCENTAGE": { "register": "1408", "prio": "7", "desc": "Max supply air fan speed setting, %." },
                                   "REG_FAN_LEVEL_EAF_MAX_PERCENTAGE": { "register": "1409", "prio": "7", "desc": "Max extract air fan speed setting, %." },
                                   "REG_FAN_LEVEL_SAF_MIN_RPM": { "register": "1410", "prio": "7", "desc": "Minimum supply air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_EAF_MIN_RPM": { "register": "1411", "prio": "7", "desc": "Minimum extract air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_SAF_LOW_RPM": { "register": "1412", "prio": "7", "desc": "Low supply air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_EAF_LOW_RPM": { "register": "1413", "prio": "7", "desc": "Low extract air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_SAF_NORMAL_RPM": { "register": "1414", "prio": "7", "desc": "Normal supply air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_EAF_NORMAL_RPM": { "register": "1415", "prio": "8", "desc": "Normal extract air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_SAF_HIGH_RPM": { "register": "1416", "prio": "8", "desc": "High supply air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_EAF_HIGH_RPM": { "register": "1417", "prio": "8", "desc": "High extract air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_SAF_MAX_RPM": { "register": "1418", "prio": "8", "desc": "Max supply air fan speed setting, rpm." },
                                   "REG_FAN_LEVEL_EAF_MAX_RPM": { "register": "1419", "prio": "8", "desc": "Max extract air fan speed setting, rpm." },
                                   "REG_TC_SP": { "register": "2000", "prio": "0", "desc": "Current temperature setpoint." },
                                   "REG_TC_CONTROL_MODE ": { "register": "2030", "prio": "4", "desc": "Control mode." },
                                   "REG_HEAT_EXCHANGER_TYPE": { "register": "2132", "prio": "4", "desc": "Heat exchanger type." },
                                   "REG_HEAT_EXCHANGER_FROM_SATC": { "register": "2140", "prio": "0", "desc": "Heat recovery demand by temperature control, %." },
                                   "REG_HEATER_FROM_SATC": { "register": "2148", "prio": "0", "desc": "Heating demand by temperature control, %." },
                                   "REG_ROTOR_RH_TRANSFER_CTRL_SETPOINT": { "register": "2202", "prio": "4", "desc": "Rotor relative humidity transfer control setpoint." },
                                   "REG_ROTOR_RH_TRANSFER_CTRL_ON_OFF": { "register": "2203", "prio": "4", "desc": "Rotor relative humidity transfer control." },
                                   "REG_CALC_RHS_EAF": { "register": "2210", "prio": "1", "desc": "Calculated moisture extract air." },
                                   "REG_CALC_RHS_SAF": { "register": "2211", "prio": "1", "desc": "Calculated moisture supply air." },
                                   "REG_ECO_MODE_ON_OFF": { "register": "2504", "prio": "3", "desc": "ECO mode configuration status." },
                                   "REG_UNIT_CONFIG_REHEATER_TYPE": { "register": "3001", "prio": "4", "desc": "Heater type." },
                                   "REG_UNIT_CONFIG_COOLER": { "register": "3013", "prio": "4", "desc": "Cooler type." },
                                   "REG_UNIT_CONFIG_EXTRA_CONTROLLER": { "register": "3014", "prio": "4", "desc": "Extra Controller Mode." },
                                   "REG_FUNCTION_ACTIVE_HEATING": { "register": "3102", "prio": "1", "desc": "Function, active heating." },
                                   "REG_FUNCTION_ACTIVE_DEFROSTING": { "register": "3103", "prio": "1", "desc": "Function, active defrosting." },
                                   "REG_FUNCTION_ACTIVE_HEAT_RECOVERY": { "register": "3104", "prio": "1", "desc": "Function, active heat recovery." },
                                   "REG_FUNCTION_ACTIVE_MOISTURE_TRANSFER": { "register": "3106", "prio": "1", "desc": "Function, active moisture transfer." },
                                   "REG_FUNCTION_ACTIVE_HEATER_COOL_DOWN": { "register": "3112", "prio": "1", "desc": "Function, active heater cool down." },
                                   "REG_FILTER_REPLACEMENT_ALARM": { "register": "7006", "prio": "3", "desc": "Filter replacement alarm (register name not official)." },
                                   "REG_SYSTEM_UNIT_TEMPERATURE": { "register": "9002", "prio": "1", "desc": "Temperature unit." },
                                   "REG_AI_CFG_CONNECTION_NTC1": { "register": "11000", "prio": "5", "desc": "Analog input 1 type." },
                                   "REG_UI_CFG_TYPE_1": { "register": "11100", "prio": "5", "desc": "Universal input 1 analog or digital." },
                                   "REG_UI_CFG_TYPE_2": { "register": "11101", "prio": "5", "desc": "Universal input 2 analog or digital." },
                                   "REG_UI_CONNECTION_ANALOG1": { "register": "11200", "prio": "5", "desc": "Universal input 1 analog type." },
                                   "REG_UI_CONNECTION_ANALOG2": { "register": "11201", "prio": "5", "desc": "Universal input 2 analog type." },
                                   "REG_UI_CONNECTION_DIGITAL1": { "register": "11300", "prio": "6", "desc": "Universal input 1 digital type." },
                                   "REG_UI_CONNECTION_DIGITAL2": { "register": "11301", "prio": "6", "desc": "Universal input 1 digital type." },
                                   "REG_DI_CONNECTION_1": { "register": "11400","prio": "6", "desc": "Digital input 1 type." },
                                   "REG_INPUT_DIGITAL_UI_1": { "register": "12020", "prio": "2", "desc": "Universal input 1, digital value." },
                                   "REG_INPUT_DIGITAL_UI_2": { "register": "12021", "prio": "2", "desc": "Universal input 1, digital value." },
                                   "REG_INPUT_DIGITAL_DI_1": { "register": "12030", "prio": "2", "desc": "Digital input 1, value." },
                                   "REG_INPUT_DIGITAL_DI_2": { "register": "12031", "prio": "2", "desc": "Digital input 2, value." },
                                   "REG_SENSOR_FPT": { "register": "12100", "prio": "2", "desc": "Frost protection temperature sensor." },
                                   "REG_SENSOR_OAT": { "register": "12101", "prio": "0", "desc": "Outdoor air temperature sensor value." },
                                   "REG_SENSOR_SAT": { "register": "12102", "prio": "0", "desc": "Supply air temperature sensor value." },
                                   "REG_SENSOR_RAT": { "register": "12103", "prio": "1", "desc": "Room air temperature sensor value." },
                                   "REG_SENSOR_EAT": { "register": "12104", "prio": "0", "desc": "Extract air temperature sensor value." },
                                   "REG_SENSOR_ECT": { "register": "12105", "prio": "2", "desc": "Extract controller temperature sensor value." },
                                   "REG_SENSOR_EFT": { "register": "12106", "prio": "2", "desc": "Efficiency temperature sensor value." },
                                   "REG_SENSOR_OHT": { "register": "12107", "prio": "1", "desc": "Overheat temperature sensor value." },
                                   "REG_SENSOR_RHS": { "register": "12108", "prio": "2", "desc": "Relative humidity sensor value." },
                                   "REG_SENSOR_BYS": { "register": "12109", "prio": "2", "desc": "Bypass damper sensor value." },
                                   "REG_SENSOR_EMT": { "register": "12110", "prio": "2", "desc": "EMT (frost) sensor value." },
                                   "REG_SENSOR_RGS": { "register": "12111", "prio": "2", "desc": "RGS (rotation guard) sensor value." },
                                   "REG_SENSOR_CO2S": { "register": "12114", "prio": "2", "desc": "CO2 sensor value." },
                                   "REG_SENSOR_RHS_PDM": { "register": "12135", "prio": "1", "desc": "In-built extract air relative humidity sensor value." },
                                   "REG_SENSOR_RPM_SAF": { "register": "12400", "prio": "3", "desc": "Supply Fan (SAF) RPM indication." },
                                   "REG_SENSOR_RPM_EAF": { "register": "12401", "prio": "3", "desc": "Extract Air Fan (EAF) RPM indication." },
                                   "REG_SENSOR_PDM_EAT_VALUE": { "register": "12543", "prio": "0", "desc": "In-built extract air temperature sensor value." },
                                   "REG_CFG_HEATER_ACTUATOR_TYPE": { "register": "13020", "prio": "5", "desc": "Heater actuator." },
                                   "REG_CFG_HEAT_EXCHANGER_ACTUATOR_TYPE": { "register": "13021", "prio": "5", "desc": "Heat exchanger actuator." },
                                   "REG_CFG_COOLER_ACTUATOR_TYPE": { "register": "13022", "prio": "5", "desc": "Cooler actuator." },
                                   "REG_OUTPUT_SAF": { "register": "14000", "prio": "3", "desc": "Supply Air Fan (SAF) output, percentage." },
                                   "REG_OUTPUT_EAF": { "register": "14001", "prio": "3", "desc": "Extract Air Fan (EAF) output, percentage." },
                                   "REG_ALARM_FILTER_ALARM": { "register": "15141", "prio": "3", "desc": "Filter replacement alarm" },
                                   "REG_ALARM_FILTER_WARNING_ALARM": { "register": "15543", "prio": "3", "desc": "Filter replacement alarm." },
                                   "REG_ALARM_TYPE_A": { "register": "15900", "prio": "3", "desc": "Indicates if an alarm Type A is active." },
                                   "REG_ALARM_TYPE_B": { "register": "15901", "prio": "3", "desc": "Indicates if an alarm Type B is active." },
                                   "REG_ALARM_TYPE_C": { "register": "15902", "prio": "3", "desc": "Indicates if an alarm Type C is active." }
                                  }
                                } %}
            {{ json_array }}

      # This is the configuration array that holds all data to be able to interact with Save Connect.
      # Links to 'systemair_chosen_unit_type'.
      # The configuration array holds all valid registers for the Systemair sensors/functions.
      # All register-addresses seems to be one lower than value in MODBUS variable list.
      - name: Systemair constants
        unique_id: systemair_constants
        state: >
          {{ "Systemair constants" }}
        attributes:
          constants: >
            {% set json_array = { "Systemair VSR 300": {
                                   "CONST_HEATER_WATT": { "constant": "1670", "desc": "Heater maximum output, watt." },
                                   "CONST_SAF_MAX_RPM": { "constant": "5000", "desc": "Supply air fan, maximum rpm." },
                                   "CONST_SAF_MIN_RPM": { "constant": "500", "desc": "Supply air fan, maximum rpm." },
                                   "CONST_EAF_MAX_RPM": { "constant": "5000", "desc": "Extract air fan, maximum rpm." },
                                   "CONST_EAF_MIN_RPM": { "constant": "500", "desc": "Extract air fan, maximum rpm." }
                                   }
                                } %}
            {{ json_array }}

      # This creates attributes based on the JSON-response.
      # It takes all the registers in 'sensor.systemair_configuration' and fills the attribute 'response' with a dictionary of all registers.
      # The attributes are populated based on the response, that can be only parts of all registers.
      # Thus, the dictionary and all registers will be updated once the response has walked through all priorities.
      # Note that we needed to add individual if/endif, as if/elif did not properly catch state of 'response_4', bug?
      - name: Systemair Save connect response
        unique_id: systemair_save_connect_response
        state: >
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set result = device_type %}
          {% endif %}
          {{ result }}
        attributes:
          response: >
            {% set device_type = states('input_select.systemair_chosen_unit_type') %}
            {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
            {% set response_1 = states('sensor.systemair_save_connect_response_1_part') %}
            {% set response_2 = states('sensor.systemair_save_connect_response_2_part') %}
            {% set response_3 = states('sensor.systemair_save_connect_response_3_part') %}
            {% set response_4 = states('sensor.systemair_save_connect_response_4_part') %}
            {% set current_response = state_attr('sensor.systemair_save_connect_response', 'response') %}
            {% set inputs_valid = true %}
            {% set result = none %}
            {% if (response_1 == 'unknown' or response_1 == 'unavailable' or response_1 == 'None' or response_1 == '{}') %}
            {%   set inputs_valid = false %}
            {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none') %}
            {%   set inputs_valid = false %}
            {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == '' or json_array == {} or json_array == '{}None') %}
            {%   set inputs_valid = false %}
            {% endif %}
            {% if (inputs_valid == true) %}
            {%   if (response_2 == 'unknown' or response_2 == 'unavailable' or response_2 == 'None' or response_2 == '{}') %}
            {%     set response_2 = "" %}
            {%   endif %}
            {%   if (response_3 == 'unknown' or response_3 == 'unavailable' or response_3 == 'None' or response_3 == '{}') %}
            {%     set response_3 = "" %}
            {%   endif %}
            {%   if (response_4 == 'unknown' or response_4 == 'unavailable' or response_4 == 'None' or response_4 == '{}') %}
            {%     set response_4 = "" %}
            {%   endif %}
            {%   set response_prio1 = response_1 + response_2 + response_3 + response_4 %}
            {%   set response = response_prio1 | from_json %}
            {%   set ns = namespace(result_list = []) %}
            {%   set items = json_array[device_type] %}
            {%   for item in items %}
            {%     set register = json_array[device_type][item].register %}
            {%     set response_value = response[register] %}
            {%     set current_value = current_response[register] %}
            {%     if (current_value == 'unknown' or current_value == 'unavailable' or current_value == 'none' or current_value == Undefined) %}
            {%       set current_value = none %}
            {%     endif %}
            {%     if (response_value == 'unknown' or response_value == 'unavailable' or response_value == 'none' or response_value == Undefined) %}
            {%       set value = current_value %}
            {%     else %}
            {%       set value = response_value %}
            {%     endif %}
            {%     set ns.result_list = ns.result_list + [(register, value)] %}
            {%   endfor %}
            {%   set result = dict.from_keys(ns.result_list) %}
            {% endif %}
            {{ result }}

      # We want to gather information about the temperature unit.
      # Modbus register in configuration: REG_SYSTEM_UNIT_TEMPERATURE
      # Logic:
      # 0 - Celcius
      # 1- Fahrenheit
      - name: Systemair read temperature unit
        unique_id: systemair_read_temperature_unit
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SYSTEM_UNIT_TEMPERATURE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the temperature unit, to string.
      # Modbus register in configuration: REG_SYSTEM_UNIT_TEMPERATURE
      # Logic:
      # 0 - Celcius
      # 1- Fahrenheit
      - name: Systemair read temperature unit str
        unique_id: systemair_read_temperature_unit_str
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SYSTEM_UNIT_TEMPERATURE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "°C" %}
          {%     elif (value == 1) %}
          {%       set result = "°F" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current temperature setpoint in celcius.
      # Modbus register in configuration: REG_TC_SP
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read current temperature setpoint celcius
        unique_id: systemair_read_current_temperature_setpoint_celcius
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°C"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_TC_SP"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = result %}
          {%     elif (temp_unit == 1) %}
          {%       set result = ((result - 32) * (5/9)) %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current temperature setpoint in fahrenheit.
      # Modbus register in configuration: REG_TC_SP
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read current temperature setpoint fahrenheit
        unique_id: systemair_read_current_temperature_setpoint_fahrenheit
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°F"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_TC_SP"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = ((result * (9/5)) + 32) %}
          {%     elif (temp_unit == 1) %}
          {%       set result = result %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the active user mode.
      # Modbus register in configuration: REG_USERMODE_MODE
      # Logic:
      # 0: Auto
      # 1: Manual
      # 2: Crowded
      # 3: Refresh
      # 4: Fireplace
      # 5: Away
      # 6: Holiday
      # 7: Cooker Hood
      # 8: Vacuum cleaner
      # 9: Configurable DI 1
      # 10: Configurable DI 2
      # 11: Configurable D
      - name: Systemair read active user mode
        unique_id: systemair_read_active_user_mode
        state_class: measurement
        icon: mdi:cog
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_USERMODE_MODE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the active user mode, to string.
      # Modbus register in configuration: REG_USERMODE_MODE
      # Logic:
      # 0: Auto
      # 1: Manual
      # 2: Crowded
      # 3: Refresh
      # 4: Fireplace
      # 5: Away
      # 6: Holiday
      # 7: Cooker Hood
      # 8: Vacuum cleaner
      # 9: Configurable DI 1
      # 10: Configurable DI 2
      # 11: Configurable D
      - name: Systemair read active user mode str
        unique_id: systemair_read_active_user_mode_str
        icon: mdi:cog
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_USERMODE_MODE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%     set result = "Auto" %}
          {%     elif (value == 1) %}
          {%       set result = "Manual" %}
          {%     elif (value == 2) %}
          {%       set result = "Crowded" %}
          {%     elif (value == 3) %}
          {%       set result = "Refresh" %}
          {%     elif (value == 4) %}
          {%       set result = "Fireplace" %}
          {%     elif (value == 5) %}
          {%       set result = "Away" %}
          {%     elif (value == 6) %}
          {%       set result = "Holiday" %}
          {%     elif (value == 7) %}
          {%       set result = "Cooker Hood" %}
          {%     elif (value == 8) %}
          {%       set result = "Vacuum cleaner" %}
          {%     elif (value == 9) %}
          {%       set result = "Configurable DI 1" %}
          {%     elif (value == 10) %}
          {%       set result = "Configurable DI 2" %}
          {%     elif (value == 11) %}
          {%       set result = "Configurable D" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the fan speed level for mode manual.
      # Modbus register in configuration: REG_USERMODE_MANUAL_AIRFLOW_LEVEL
      # Logic:
      # 0: Off (only allowed if REG_FAN_MANUAL_STOP_ALLOWED register value is 1)
      # 1: Not used
      # 2: Low
      # 3: Normal
      # 4: High
      - name: Systemair read usermode manual airflow level
        unique_id: systemair_read_usermode_manual_airflow_level
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_USERMODE_MANUAL_AIRFLOW_LEVEL"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the fan speed level for mode manual, to string.
      # Modbus register in configuration: REG_USERMODE_MANUAL_AIRFLOW_LEVEL
      # Logic:
      # 0: Off (only allowed if REG_FAN_MANUAL_STOP_ALLOWED register value is 1)
      # 1: Not used
      # 2: Low
      # 3: Normal
      # 4: High
      - name: Systemair read usermode manual airflow level str
        unique_id: systemair_read_usermode_manual_airflow_level_str
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_USERMODE_MANUAL_AIRFLOW_LEVEL"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Off" %}
          {%     elif (value == 1) %}
          {%       set result = "Not used" %}
          {%     elif (value == 2) %}
          {%       set result = "Low" %}
          {%     elif (value == 3) %}
          {%       set result = "Normal" %}
          {%     elif (value == 4) %}
          {%       set result = "High" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the Supply Air Fan (SAF) RPM indication.
      # Modbus register in configuration: REG_SENSOR_RPM_SAF
      - name: Systemair read SAF RPM indication
        unique_id: systemair_read_saf_rpm_indication
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_RPM_SAF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the Supply Air Fan (SAF) percentage.
      # Modbus register in configuration: REG_OUTPUT_SAF
      # Min value 16.
      - name: Systemair read SAF percentage
        unique_id: systemair_read_saf_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_OUTPUT_SAF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the Extract Air Fan (EAF) RPM indication.
      # Modbus register in configuration: REG_SENSOR_RPM_EAF
      - name: Systemair read EAF RPM indication
        unique_id: systemair_read_eaf_rpm_indication
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_RPM_EAF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the Extract Air Fan (EAF) percentage.
      # Modbus register in configuration: REG_OUTPUT_EAF
      # Min value 16.
      - name: Systemair read EAF percentage
        unique_id: systemair_read_eaf_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_OUTPUT_EAF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current outdoor air temperature, in celcius.
      # Modbus register in configuration: REG_SENSOR_OAT
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read outdoor air temperature celcius
        unique_id: systemair_read_outdoor_air_temperature_celcius
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°C"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_OAT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = result %}
          {%     elif (temp_unit == 1) %}
          {%       set result = ((result - 32) * (5/9)) %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current outdoor air temperature, in fahrenheit.
      # Modbus register in configuration: REG_SENSOR_OAT
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read outdoor air temperature fahrenheit
        unique_id: systemair_read_outdoor_air_temperature_fahrenheit
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°F"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_OAT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = ((result * (9/5)) + 32) %}
          {%     elif (temp_unit == 1) %}
          {%       set result = result %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current supply air temperature, in celcius.
      # Modbus register in configuration: REG_SENSOR_SAT
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read supply air temperature celcius
        unique_id: systemair_read_supply_air_temperature_celcius
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°C"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_SAT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = result %}
          {%     elif (temp_unit == 1) %}
          {%       set result = ((result - 32) * (5/9)) %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current supply air temperature, in fahrenheit.
      # Modbus register in configuration: REG_SENSOR_SAT
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read supply air temperature fahrenheit
        unique_id: systemair_read_supply_air_temperature_fahrenheit
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°F"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_SAT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = ((result * (9/5)) + 32) %}
          {%     elif (temp_unit == 1) %}
          {%       set result = result %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current extract air temperature, in celcius.
      # Modbus register in configuration: REG_SENSOR_PDM_EAT_VALUE
      # On my device REG_SENSOR_EAT is empty, but REG_SENSOR_PDM_EAT_VALUE has right value.
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read extract air temperature celcius
        unique_id: systemair_read_extract_air_temperature_celcius
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°C"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_PDM_EAT_VALUE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = result %}
          {%     elif (temp_unit == 1) %}
          {%       set result = ((result - 32) * (5/9)) %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current extract air temperature, in fahrenheit.
      # Modbus register in configuration: REG_SENSOR_PDM_EAT_VALUE
      # On my device REG_SENSOR_EAT is empty, but REG_SENSOR_PDM_EAT_VALUE has right value.
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read extract air temperature fahrenheit
        unique_id: systemair_read_extract_air_temperature_fahrenheit
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°F"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_PDM_EAT_VALUE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = ((result * (9/5)) + 32) %}
          {%     elif (temp_unit == 1) %}
          {%       set result = result %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the current overheat temperature, in celcius.
      # Modbus register in configuration: REG_SENSOR_OHT
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read overheat temperature celcius
        unique_id: systemair_read_overheat_temperature_celcius
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°C"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_OHT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = result %}
          {%     elif (temp_unit == 1) %}
          {%       set result = ((result - 32) * (5/9)) %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result  }}

      # We want to gather the current overheat temperature, in fahrenheit.
      # Modbus register in configuration: REG_SENSOR_OHT
      # Takes into account the temperature unit of the unit.
      # Logic:
      # If the temperature sensor reading is higher than 60000: Temperature = (REG_SENSOR_* - 65536) / 10
      # If temperature sensor reading is lower than 60000: Temperature = REG_SENSOR_* / 10
      - name: Systemair read overheat temperature fahrenheit
        unique_id: systemair_read_overheat_temperature_fahrenheit
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°F"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set temp_unit = states('sensor.systemair_read_temperature_unit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% elif (temp_unit == 'unknown' or temp_unit == 'unavailable' or temp_unit == 'none' or temp_unit == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_OHT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     set temp_unit = int(temp_unit) %}
          {%     if (value > 60000) %}
          {%       set result = (value - 65536) / 10  %}
          {%     else %}
          {%       set result = value / 10  %}
          {%     endif %}
          {%     if (temp_unit == 0) %}
          {%       set result = ((result * (9/5)) + 32) %}
          {%     elif (temp_unit == 1) %}
          {%       set result = result %}
          {%     endif %}
          {%     set result = result | round(1) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the difference between outdoor air and supply air temperature, a.k.a. recovery temperature, in celcius.
      - name: Systemair read recovery temperature celcius
        unique_id: systemair_read_recovery_temperature_celcius
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°C"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set outdoor = states('sensor.systemair_read_outdoor_air_temperature_celcius') %}
          {% set supply = states('sensor.systemair_read_supply_air_temperature_celcius') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (outdoor == 'unknown' or outdoor == 'unavailable' or outdoor == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (supply == 'unknown' or supply == 'unavailable' or supply == 'none') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set result = float(supply) - float(outdoor) %}
          {%   set result = result | round(1) %}
          {% endif %}
          {{ result  }}

      # We want to gather the difference between outdoor air and supply air temperature, a.k.a. recovery temperature, in fahrenheit.
      - name: Systemair read recovery temperature fahrenheit
        unique_id: systemair_read_recovery_temperature_fahrenheit
        #  device_class: "temperature" # Removed 20250130 since by adding device_class HA automatically converts according to the unit-system set for the installation.
        unit_of_measurement: "°F"
        state_class: measurement
        icon: mdi:thermometer
        state: >
          {% set outdoor = states('sensor.systemair_read_outdoor_air_temperature_fahrenheit') %}
          {% set supply = states('sensor.systemair_read_supply_air_temperature_fahrenheit') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (outdoor == 'unknown' or outdoor == 'unavailable' or outdoor == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (supply == 'unknown' or supply == 'unavailable' or supply == 'none') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set result = float(supply) - float(outdoor) %}
          {%   set result = result | round(1) %}
          {% endif %}
          {{ result  }}

      # We want to gather information about the extract air relative humidity sensor value.
      # Modbus register in configuration: REG_SENSOR_RHS_PDM
      - name: Systemair read EAF relative humidity
        unique_id: systemair_read_eaf_relative_humidity
        device_class: "humidity"
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:water-percent
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_SENSOR_RHS_PDM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heat exchanger type.
      # Modbus register in configuration: REG_HEAT_EXCHANGER_TYPE
      # Logic:
      # 0: Rotating
      # 1: Plate
      - name: Systemair read heat exchanger type
        unique_id: systemair_read_heat_exchanger_type
        state_class: measurement
        icon: mdi:hvac
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_HEAT_EXCHANGER_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heat exchanger type, to string.
      # Modbus register in configuration: REG_HEAT_EXCHANGER_TYPE
      # Logic:
      # 0: Rotating
      # 1: Plate
      - name: Systemair read heat exchanger type str
        unique_id: systemair_read_heat_exchanger_type_str
        icon: mdi:hvac
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_HEAT_EXCHANGER_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Rotating" %}
          {%     elif (value == 1) %}
          {%       set result = "Plate" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heat exchanger actuator.
      # Modbus register in configuration: REG_CFG_HEAT_EXCHANGER_ACTUATOR_TYPE
      # Logic:
      # 0: 0-10V
      # 1: 2-10V
      # 2: 10-0V
      # 3: 10-2V
      - name: Systemair read heat exchanger actuator
        unique_id: systemair_read_heat_exchanger_actuator
        state_class: measurement
        icon: mdi:current-dc
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CFG_HEAT_EXCHANGER_ACTUATOR_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heat exchanger actuator, to string.
      # Modbus register in configuration: REG_CFG_HEAT_EXCHANGER_ACTUATOR_TYPE
      # Logic:
      # 0: 0-10V
      # 1: 2-10V
      # 2: 10-0V
      # 3: 10-2V
      - name: Systemair read heat exchanger actuator str
        unique_id: systemair_read_heat_exchanger_actuator_str
        icon: mdi:current-dc
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CFG_HEAT_EXCHANGER_ACTUATOR_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "0-10V" %}
          {%     elif (value == 1) %}
          {%       set result = "2-10V" %}
          {%     elif (value == 2) %}
          {%       set result = "10-0V" %}
          {%     elif (value == 3) %}
          {%       set result = "10-2V" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heater type.
      # Modbus register in configuration: REG_UNIT_CONFIG_REHEATER_TYPE
      # Logic:
      # 0: None (None defined, as None otherwise becomes unknown)
      # 1: Electrical
      # 2: Water
      # 3: Change-over
      - name: Systemair read heater type
        unique_id: systemair_read_heater_type
        state_class: measurement
        icon: mdi:heat-wave
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UNIT_CONFIG_REHEATER_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heater type, to string.
      # Modbus register in configuration: REG_UNIT_CONFIG_REHEATER_TYPE
      # Logic:
      # 0: None (None defined, as None otherwise becomes unknown)
      # 1: Electrical
      # 2: Water
      # 3: Change-over
      - name: Systemair read heater type str
        unique_id: systemair_read_heater_type_str
        icon: mdi:heat-wave
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UNIT_CONFIG_REHEATER_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "None defined" %}
          {%     elif (value == 1) %}
          {%       set result = "Electrical" %}
          {%     elif (value == 2) %}
          {%       set result = "Water" %}
          {%     elif (value == 3) %}
          {%       set result = "Change-over" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heater actuator.
      # Modbus register in configuration: REG_CFG_HEATER_ACTUATOR_TYPE
      # Logic:
      # 0: 0-10V
      # 1: 2-10V
      # 2: 10-0V
      # 3: 10-2V
      - name: Systemair read heater actuator
        unique_id: systemair_read_heater_actuator
        state_class: measurement
        icon: mdi:current-dc
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CFG_HEATER_ACTUATOR_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the heater actuator, to string.
      # Modbus register in configuration: REG_CFG_HEATER_ACTUATOR_TYPE
      # Logic:
      # 0: 0-10V
      # 1: 2-10V
      # 2: 10-0V
      # 3: 10-2V
      - name: Systemair read heater actuator str
        unique_id: systemair_read_heater_actuator_str
        icon: mdi:current-dc
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CFG_HEATER_ACTUATOR_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "0-10V" %}
          {%     elif (value == 1) %}
          {%       set result = "2-10V" %}
          {%     elif (value == 2) %}
          {%       set result = "10-0V" %}
          {%     elif (value == 3) %}
          {%       set result = "10-2V" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the cooler type.
      # Modbus register in configuration: REG_UNIT_CONFIG_COOLER
      # Logic:
      # 0: None (None defined, as None otherwise becomes unknown)
      # 1: Water
      # 2: Changeover
      - name: Systemair read cooler type
        unique_id: systemair_read_cooler_type
        state_class: measurement
        icon: mdi:snowflake
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UNIT_CONFIG_COOLER"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the cooler type, to string.
      # Modbus register in configuration: REG_UNIT_CONFIG_COOLER
      # Logic:
      # 0: None (None defined, as None otherwise becomes unknown)
      # 1: Water
      # 2: Changeover
      - name: Systemair read cooler type str
        unique_id: systemair_read_cooler_type_str
        icon: mdi:snowflake
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UNIT_CONFIG_COOLER"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "None defined" %}
          {%     elif (value == 1) %}
          {%       set result = "Water" %}
          {%     elif (value == 2) %}
          {%       set result = "Changeover" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the cooler actuator.
      # Modbus register in configuration: REG_CFG_COOLER_ACTUATOR_TYPE
      # Logic:
      # 0: 0-10V
      # 1: 2-10V
      # 2: 10-0V
      # 3: 10-2V
      - name: Systemair read cooler actuator
        unique_id: systemair_read_cooler_actuator
        state_class: measurement
        icon: mdi:current-dc
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CFG_COOLER_ACTUATOR_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the cooler actuator, to string.
      # Modbus register in configuration: REG_CFG_COOLER_ACTUATOR_TYPE
      # Logic:
      # 0: 0-10V
      # 1: 2-10V
      # 2: 10-0V
      # 3: 10-2V
      - name: Systemair read cooler actuator str
        unique_id: systemair_read_cooler_actuator_str
        icon: mdi:current-dc
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CFG_COOLER_ACTUATOR_TYPE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "0-10V" %}
          {%     elif (value == 1) %}
          {%       set result = "2-10V" %}
          {%     elif (value == 2) %}
          {%       set result = "10-0V" %}
          {%     elif (value == 3) %}
          {%       set result = "10-2V" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the extra controller mode.
      # Modbus register in configuration: REG_UNIT_CONFIG_EXTRA_CONTROLLER
      # Logic:
      # 0: None (None defined, as None otherwise becomes unknown)
      # 1: Preheater
      # 2: Heating
      # 3: Cooling
      # 4: GEO Exchanger
      - name: Systemair read extra controller mode
        unique_id: systemair_read_extra_controller_mode
        state_class: measurement
        icon: mdi:cog-outline
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UNIT_CONFIG_EXTRA_CONTROLLER"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the extra controller mode, to string.
      # Modbus register in configuration: REG_UNIT_CONFIG_EXTRA_CONTROLLER
      # Logic:
      # 0: None (None defined, as None otherwise becomes unknown)
      # 1: Preheater
      # 2: Heating
      # 3: Cooling
      # 4: GEO Exchanger
      - name: Systemair read extra controller mode str
        unique_id: systemair_read_extra_controller_mode_str
        icon: mdi:cog-outline
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UNIT_CONFIG_EXTRA_CONTROLLER"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "None defined" %}
          {%     elif (value == 1) %}
          {%       set result = "Preheater" %}
          {%     elif (value == 2) %}
          {%       set result = "Heating" %}
          {%     elif (value == 3) %}
          {%       set result = "Cooling" %}
          {%     elif (value == 4) %}
          {%       set result = "GEO Exchanger" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the control mode.
      # Modbus register in configuration: REG_TC_CONTROL_MODE
      # Logic:
      # 0: Supply air temperature control
      # 1: Room temperature control
      # 2: Extract air temperature control
      - name: Systemair read control mode
        unique_id: systemair_read_control_mode
        state_class: measurement
        icon: mdi:gamepad-circle-up
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_TC_CONTROL_MODE "].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the control mode, to string.
      # Modbus register in configuration: REG_TC_CONTROL_MODE
      # Logic:
      # 0: Supply air temperature control
      # 1: Room temperature control
      # 2: Extract air temperature control
      - name: Systemair read control mode str
        unique_id: systemair_read_control_mode_str
        icon: mdi:gamepad-circle-up
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_TC_CONTROL_MODE "].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Supply air temperature control" %}
          {%     elif (value == 1) %}
          {%       set result = "Room temperature control" %}
          {%     elif (value == 2) %}
          {%       set result = "Extract air temperature control" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the airflow type.
      # Modbus register in configuration: REG_FAN_REGULATION_UNIT
      # Logic:
      # 0: Manual
      # 1: RPM
      # 2: Pressure
      # 3: Flow
      # 4: External
      - name: Systemair read airflow type
        unique_id: systemair_read_airflow_type
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_REGULATION_UNIT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the airflow type, to string.
      # Modbus register in configuration: REG_FAN_REGULATION_UNIT
      # Logic:
      # 0: Manual
      # 1: RPM
      # 2: Pressure
      # 3: Flow
      # 4: External
      - name: Systemair read airflow type str
        unique_id: systemair_read_airflow_type_str
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_REGULATION_UNIT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Manual" %}
          {%     elif (value == 1) %}
          {%       set result = "RPM" %}
          {%     elif (value == 2) %}
          {%      set result = "Pressure" %}
          {%     elif (value == 3) %}
          {%       set result = "Flow" %}
          {%     elif (value == 4) %}
          {%       set result = "External" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about heat recovery demand by temperature control percentage.
      # Modbus register in configuration: REG_HEAT_EXCHANGER_FROM_SATC
      - name: Systemair read heat exchanger recovery demand percentage
        unique_id: systemair_read_heat_exchanger_recovery_demand_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:percent-circle-outline
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_HEAT_EXCHANGER_FROM_SATC"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about heater control percentage.
      # Modbus register in configuration: REG_HEATER_FROM_SATC
      - name: Systemair read heater control percentage
        unique_id: systemair_read_heater_control_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:percent-circle-outline
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_HEATER_FROM_SATC"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about heater and power in watt.
      # Modbus register in configuration: REG_HEATER_FROM_SATC
      - name: Systemair read heater power
        unique_id: systemair_read_heater_power
        device_class: power
        unit_of_measurement: "kW"
        state_class: measurement
        icon: mdi:heat-wave
        state: >
          {% set heater_pct = states('sensor.systemair_read_heater_control_percentage') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_constants', 'constants') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (heater_pct == 'unknown' or heater_pct == 'unavailable' or heater_pct == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set heater_pct = float(heater_pct) / 100 %}
          {%   set heater_power = json_array[device_type]["CONST_HEATER_WATT"].constant %}
          {%   set heater_power = float(heater_power) / 1000 %}
          {%   set result = heater_power * heater_pct %}
          {%   set result = result | round (2) %}
          {% endif %}
          {{ result }}

      # We want to gather information the heat exchanger efficiency.
      # Note that this sensor is only valid if the heater is not enabled.
      - name: Systemair read heat exchanger efficicency
        unique_id: systemair_read_heat_exchanger_efficicency
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:chart-bell-curve-cumulative
        state: >
          {% set supply = states('sensor.systemair_read_supply_air_temperature_celcius') %}
          {% set outdoor = states('sensor.systemair_read_outdoor_air_temperature_celcius') %}
          {% set extract = states('sensor.systemair_read_extract_air_temperature_celcius') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (supply == 'unknown' or supply == 'unavailable' or supply == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (outdoor == 'unknown' or outdoor == 'unavailable' or outdoor == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (extract == 'unknown' or extract == 'unavailable' or extract == 'none') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set supply = float(supply) %}
          {%   set outdoor = float(outdoor) %}
          {%   set extract = float(extract) %}
          {%   set result = ((supply - outdoor) / (extract - outdoor)) * 100 %}
          {%   set result = result | round (1) %}
          {% endif %}
          {{ result }}

      # We want to gather information the heat exchanger efficiency, without heater.
      # Will be set to None if the heater is on.
      # Note that this sensor is only valid if the heater is not enabled.
      - name: Systemair read heat exchanger efficicency without heater
        unique_id: systemair_read_heat_exchanger_efficicency_without_heater
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:chart-bell-curve-cumulative
        state: >
          {% set supply = states('sensor.systemair_read_supply_air_temperature_celcius') %}
          {% set outdoor = states('sensor.systemair_read_outdoor_air_temperature_celcius') %}
          {% set extract = states('sensor.systemair_read_extract_air_temperature_celcius') %}
          {% set heater_on = states('binary_sensor.systemair_read_heater_on') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (supply == 'unknown' or supply == 'unavailable' or supply == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (outdoor == 'unknown' or outdoor == 'unavailable' or outdoor == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (extract == 'unknown' or extract == 'unavailable' or extract == 'none') %}
          {%   set inputs_valid = false %}
          {% elif (heater_on == 'unknown' or heater_on == 'unavailable' or heater_on == 'none' or heater_on == 'on') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set supply = float(supply) %}
          {%   set outdoor = float(outdoor) %}
          {%   set extract = float(extract) %}
          {%   set result = ((supply - outdoor) / (extract - outdoor)) * 100 %}
          {%   set result = result | round (1) %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan min percentage
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_MIN_PERCENTAGE
      - name: Systemair read supply air fan min percentage
        unique_id: systemair_read_supply_air_fan_min_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_MIN_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan min percentage
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_MIN_PERCENTAGE
      - name: Systemair read extract air fan min percentage
        unique_id: systemair_read_extract_air_fan_min_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_MIN_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan low percentage
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_LOW_PERCENTAGE
      - name: Systemair read supply air fan low percentage
        unique_id: systemair_read_supply_air_fan_low_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_LOW_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan low percentage
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_LOW_PERCENTAGE
      - name: Systemair read extract air fan low percentage
        unique_id: systemair_read_extract_air_fan_low_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_LOW_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan normal percentage
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_NORMAL_PERCENTAGE
      - name: Systemair read supply air fan normal percentage
        unique_id: systemair_read_supply_air_fan_normal_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_NORMAL_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan normal percentage
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_NORMAL_PERCENTAGE
      - name: Systemair read extract air fan normal percentage
        unique_id: systemair_read_extract_air_fan_normal_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_NORMAL_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan high percentage
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_HIGH_PERCENTAGE
      - name: Systemair read supply air fan high percentage
        unique_id: systemair_read_supply_air_fan_high_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_HIGH_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan high percentage
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_HIGH_PERCENTAGE
      - name: Systemair read extract air fan high percentage
        unique_id: systemair_read_extract_air_fan_high_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_HIGH_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan max percentage
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_MAX_PERCENTAGE
      - name: Systemair read supply air fan max percentage
        unique_id: systemair_read_supply_air_fan_max_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_MAX_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan max percentage
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_MAX_PERCENTAGE
      - name: Systemair read extract air fan max percentage
        unique_id: systemair_read_extract_air_fan_max_percentage
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_MAX_PERCENTAGE"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan min rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_MIN_RPM
      - name: Systemair read supply air fan min rpm
        unique_id: systemair_read_supply_air_fan_min_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_MIN_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan min rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_MIN_RPM
      - name: Systemair read extract air fan min rpm
        unique_id: systemair_read_extract_air_fan_min_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_MIN_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan low rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_LOW_RPM
      - name: Systemair read supply air fan low rpm
        unique_id: systemair_read_supply_air_fan_low_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_LOW_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan low rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_LOW_RPM
      - name: Systemair read extract air fan low rpm
        unique_id: systemair_read_extract_air_fan_low_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_LOW_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan normal rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_NORMAL_RPM
      - name: Systemair read supply air fan normal rpm
        unique_id: systemair_read_supply_air_fan_normal_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_NORMAL_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan normal rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_NORMAL_RPM
      - name: Systemair read extract air fan normal rpm
        unique_id: systemair_read_extract_air_fan_normal_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_NORMAL_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan high rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_HIGH_RPM
      - name: Systemair read supply air fan high rpm
        unique_id: systemair_read_supply_air_fan_high_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_HIGH_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan high rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_HIGH_RPM
      - name: Systemair read extract air fan high rpm
        unique_id: systemair_read_extract_air_fan_high_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_HIGH_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the supply air fan max rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_SAF_MAX_RPM
      - name: Systemair read supply air fan max rpm
        unique_id: systemair_read_supply_air_fan_max_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_SAF_MAX_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the extract air fan max rpm.
      # Modbus register in configuration: REG_FAN_LEVEL_EAF_MAX_RPM
      - name: Systemair read extract air fan max rpm
        unique_id: systemair_read_extract_air_fan_max_rpm
        unit_of_measurement: "rpm"
        state_class: measurement
        icon: mdi:fan
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_LEVEL_EAF_MAX_RPM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the rotor relative humidity transfer control setpoint.
      # Modbus register in configuration: REG_ROTOR_RH_TRANSFER_CTRL_SETPOINT
      - name: Systemair read rotor relative humidity transfer control setpoint
        unique_id: systemair_read_heat_rotor_relative_humidity_transfer_control_setpoint
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:water-percent-alert
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ROTOR_RH_TRANSFER_CTRL_SETPOINT"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the calculated moisture extract air.
      # Modbus register in configuration: REG_CALC_RHS_EAF
      - name: Systemair read calculated moisture extract air
        unique_id: systemair_read_calculated_moisture_extract_air
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:water-percent
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CALC_RHS_EAF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the calculated moisture supply air.
      # Modbus register in configuration: REG_CALC_RHS_SAF
      - name: Systemair read calculated moisture supply air
        unique_id: systemair_read_calculated_moisture_supply_air
        unit_of_measurement: "%"
        state_class: measurement
        icon: mdi:water-percent
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_CALC_RHS_SAF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type for analog input 1.
      # Modbus register in configuration: REG_AI_CFG_CONNECTION_NTC1
      # Logic:
      # 0: Inactive Input
      # 1: Outdoor Air Temperature sensor (OAT)
      # 2: Supply Air Temperature sensor (SAT)
      # 3: Overheat Temperature Sensor (OHT)
      # 4: Frost Protection Temperature Sensor (FPT)
      # 5: Room Air Temperature sensor (RAT)
      # 6: Extract Air Temperature sensor (EAT)
      # 7: Extra Controller Temperature sensor (ECT)
      # 8: Efficiency temperature sensor (EFT)
      - name: Systemair read analog input 1 type
        unique_id: systemair_analog_input_1_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_AI_CFG_CONNECTION_NTC1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type for analog input 1, to string.
      # Modbus register in configuration: REG_AI_CFG_CONNECTION_NTC1
      # Logic:
      # 0: Inactive Input
      # 1: Outdoor Air Temperature sensor (OAT)
      # 2: Supply Air Temperature sensor (SAT)
      # 3: Overheat Temperature Sensor (OHT)
      # 4: Frost Protection Temperature Sensor (FPT)
      # 5: Room Air Temperature sensor (RAT)
      # 6: Extract Air Temperature sensor (EAT)
      # 7: Extra Controller Temperature sensor (ECT)
      # 8: Efficiency temperature sensor (EFT)
      - name: Systemair read analog input 1 type_str
        unique_id: systemair_analog_input_1_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_AI_CFG_CONNECTION_NTC1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Inactive Input" %}
          {%     elif (value == 1) %}
          {%       set result = "Outdoor Air Temperature sensor (OAT)" %}
          {%     elif (value == 2) %}
          {%       set result = "Supply Air Temperature sensor (SAT)" %}
          {%     elif (value == 3) %}
          {%       set result = "Overheat Temperature Sensor (OHT)" %}
          {%     elif (value == 4) %}
          {%       set result = "Frost Protection Temperature Sensor (FPT)" %}
          {%     elif (value == 5) %}
          {%       set result = "Room Air Temperature sensor (RAT)" %}
          {%     elif (value == 6) %}
          {%       set result = "Extract Air Temperature sensor (EAT)" %}
          {%     elif (value == 7) %}
          {%       set result = "Extra Controller Temperature sensor (ECT)" %}
          {%     elif (value == 8) %}
          {%       set result = "Efficiency temperature sensor (EFT)" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type for digital input 1.
      # Modbus register in configuration: REG_DI_CONNECTION_1
      # Logic:
      # 0: Inactive Input
      # 1: Away
      # 2: Bypass Damper (BYS)
      # 3: Vacuum Cleaner
      # 4: Cooker Hood
      # 5: Crowded
      # 6: EMT
      # 7: External Stop
      # 8: Extra Controller Alarm
      # 9: Fireplace
      # 10: Holiday
      # 11: Refresh
      # 12: RGS
      # 13: Change Over Feedback
      # 14: Fire Alarm
      # 15: Configurable digital input 1
      # 16: Configurable digital input 2
      # 17: Configurable digital input 3
      # 18: Pressure Guard
      - name: Systemair read digital input 1 type
        unique_id: systemair_digital_input_1_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_DI_CONNECTION_1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type for digital input 1, to string.
      # Modbus register in configuration: REG_DI_CONNECTION_1
      # Logic:
      # 0: Inactive Input
      # 1: Away
      # 2: Bypass Damper (BYS)
      # 3: Vacuum Cleaner
      # 4: Cooker Hood
      # 5: Crowded
      # 6: EMT
      # 7: External Stop
      # 8: Extra Controller Alarm
      # 9: Fireplace
      # 10: Holiday
      # 11: Refresh
      # 12: RGS
      # 13: Change Over Feedback
      # 14: Fire Alarm
      # 15: Configurable digital input 1
      # 16: Configurable digital input 2
      # 17: Configurable digital input 3
      # 18: Pressure Guard
      - name: Systemair read digital input 1 type str
        unique_id: systemair_digital_input_1_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_DI_CONNECTION_1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Inactive Input" %}
          {%     elif (value == 1) %}
          {%       set result = "Away" %}
          {%     elif (value == 2) %}
          {%       set result = "Bypass Damper (BYS)" %}
          {%     elif (value == 3) %}
          {%       set result = "Vacuum Cleaner" %}
          {%     elif (value == 4) %}
          {%       set result = "Cooker Hood" %}
          {%     elif (value == 5) %}
          {%       set result = "Crowded" %}
          {%     elif (value == 6) %}
          {%       set result = "EMT" %}
          {%     elif (value == 7) %}
          {%       set result = "External Stop" %}
          {%     elif (value == 8) %}
          {%       set result = "Extra Controller Alarm" %}
          {%     elif (value == 9) %}
          {%       set result = "Fireplace" %}
          {%     elif (value == 10) %}
          {%       set result = "Holiday" %}
          {%     elif (value == 11) %}
          {%       set result = "Refresh" %}
          {%     elif (value == 12) %}
          {%       set result = "RGS" %}
          {%     elif (value == 13) %}
          {%       set result = "Change Over Feedback" %}
          {%     elif (value == 14) %}
          {%       set result = "Fire Alarm" %}
          {%     elif (value == 15) %}
          {%       set result = "Configurable digital input 1" %}
          {%     elif (value == 16) %}
          {%       set result = "Configurable digital input 2" %}
          {%     elif (value == 17) %}
          {%       set result = "Configurable digital input 3" %}
          {%     elif (value == 18) %}
          {%      set result = "Pressure Guard" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type (analog or digital) for universal input 1.
      # Modbus register in configuration: REG_UI_CFG_TYPE_1
      # Logic:
      # 0: Not set
      # 1: Analog Input
      # 2: Digital Input
      - name: Systemair read universal input 1 type
        unique_id: systemair_universal_input_1_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CFG_TYPE_1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type (analog or digital) for universal input 1, to string.
      # Modbus register in configuration: REG_UI_CFG_TYPE_1
      # Logic:
      # 0: Not set
      # 1: Analog Input
      # 2: Digital Input
      - name: Systemair read universal input 1 type str
        unique_id: systemair_universal_input_1_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CFG_TYPE_1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Not set" %}
          {%     elif (value == 1) %}
          {%       set result = "Analog Input" %}
          {%     elif (value == 2) %}
          {%       set result = "Digital Input" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type (analog or digital) for universal input 2.
      # Modbus register in configuration: REG_UI_CFG_TYPE_2
      # Logic:
      # 0: Not set
      # 1: Analog Input
      # 2: Digital Input
      - name: Systemair read universal input 2 type
        unique_id: systemair_universal_input_2_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CFG_TYPE_2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the type (analog or digital) for universal input 1, to string.
      # Modbus register in configuration: REG_UI_CFG_TYPE_2
      # Logic:
      # 0: Not set
      # 1: Analog Input
      # 2: Digital Input
      - name: Systemair read universal input 2 type str
        unique_id: systemair_universal_input_2_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CFG_TYPE_2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Not set" %}
          {%     elif (value == 1) %}
          {%       set result = "Analog Input" %}
          {%     elif (value == 2) %}
          {%       set result = "Digital Input" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the analog type for universal input 1.
      # Modbus register in configuration: REG_UI_CONNECTION_ANALOG1
      # Logic:
      # 0: Inactive Input
      # 1: RH Sensor (RH)
      # 2: CO2 Sensor (CO2)
      # 3: Supply Air Fan Control (SAFC)
      # 4: Extract Air Fan Control (EAFC)
      # 5: Bypass damper Feedback (BYF)
      - name: Systemair read universal input 1 analog type
        unique_id: systemair_universal_input_1_analog_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_ANALOG1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the analog type for universal input 1, to string.
      # Modbus register in configuration: REG_UI_CONNECTION_ANALOG1
      # Logic:
      # 0: Inactive Input
      # 1: RH Sensor (RH)
      # 2: CO2 Sensor (CO2)
      # 3: Supply Air Fan Control (SAFC)
      # 4: Extract Air Fan Control (EAFC)
      # 5: Bypass damper Feedback (BYF)
      - name: Systemair read universal input 1 analog type str
        unique_id: systemair_universal_input_1_analog_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_ANALOG1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Inactive Input" %}
          {%     elif (value == 1) %}
          {%       set result = "RH Sensor (RH)" %}
          {%     elif (value == 2) %}
          {%       set result = "CO2 Sensor (CO2)" %}
          {%     elif (value == 3) %}
          {%       set result = "Supply Air Fan Control (SAFC)" %}
          {%     elif (value == 4) %}
          {%       set result = "Extract Air Fan Control (EAFC)" %}
          {%     elif (value == 5) %}
          {%       set result = "Bypass damper Feedback (BYF)" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the analog type for universal input 2.
      # Modbus register in configuration: REG_UI_CONNECTION_ANALOG2
      # Logic:
      # 0: Inactive Input
      # 1: RH Sensor (RH)
      # 2: CO2 Sensor (CO2)
      # 3: Supply Air Fan Control (SAFC)
      # 4: Extract Air Fan Control (EAFC)
      # 5: Bypass damper Feedback (BYF)
      - name: Systemair read universal input 2 analog type
        unique_id: systemair_universal_input_2_analog_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_ANALOG2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the analog type for universal input 2, to string.
      # Modbus register in configuration: REG_UI_CONNECTION_ANALOG2
      # Logic:
      # 0: Inactive Input
      # 1: RH Sensor (RH)
      # 2: CO2 Sensor (CO2)
      # 3: Supply Air Fan Control (SAFC)
      # 4: Extract Air Fan Control (EAFC)
      # 5: Bypass damper Feedback (BYF)
      - name: Systemair read universal input 2 analog type str
        unique_id: systemair_universal_input_2_analog_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_ANALOG2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Inactive Input" %}
          {%     elif (value == 1) %}
          {%       set result = "RH Sensor (RH)" %}
          {%     elif (value == 2) %}
          {%       set result = "CO2 Sensor (CO2)" %}
          {%     elif (value == 3) %}
          {%       set result = "Supply Air Fan Control (SAFC)" %}
          {%     elif (value == 4) %}
          {%       set result = "Extract Air Fan Control (EAFC)" %}
          {%     elif (value == 5) %}
          {%       set result = "Bypass damper Feedback (BYF)" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the digital type for universal input 1.
      # Modbus register in configuration: REG_UI_CONNECTION_DIGITAL1
      # Logic:
      # 0: Inactive Input
      # 1: Away
      # 2: Bypass Damper (BYS)
      # 3: Vacuum Cleaner
      # 4: Cooker Hood
      # 5: Crowded
      # 6: EMT
      # 7: External Stop
      # 8: Extra Controller Alarm
      # 9: Fireplace
      # 10: Holiday
      # 11: Refresh
      # 12: RGS
      # 13: Change Over Feedback
      # 14: Fire Alarm
      # 15: Configurable digital input 1
      # 16: Configurable digital input 2
      # 17: Configurable digital input 3
      # 18: Pressure Guard
      - name: Systemair read universal input 1 digital type
        unique_id: systemair_universal_input_1_digital_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_DIGITAL1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the digital type for universal input 1, to string.
      # Modbus register in configuration: REG_UI_CONNECTION_DIGITAL1
      # Logic:
      # 0: Inactive Input
      # 1: Away
      # 2: Bypass Damper (BYS)
      # 3: Vacuum Cleaner
      # 4: Cooker Hood
      # 5: Crowded
      # 6: EMT
      # 7: External Stop
      # 8: Extra Controller Alarm
      # 9: Fireplace
      # 10: Holiday
      # 11: Refresh
      # 12: RGS
      # 13: Change Over Feedback
      # 14: Fire Alarm
      # 15: Configurable digital input 1
      # 16: Configurable digital input 2
      # 17: Configurable digital input 3
      # 18: Pressure Guard
      - name: Systemair read universal input 1 digital type str
        unique_id: systemair_universal_input_1_digital_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_DIGITAL1"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Inactive Input" %}
          {%     elif (value == 1) %}
          {%       set result = "Away" %}
          {%     elif (value == 2) %}
          {%       set result = "Bypass Damper (BYS)" %}
          {%     elif (value == 3) %}
          {%       set result = "Vacuum Cleaner" %}
          {%     elif (value == 4) %}
          {%       set result = "Cooker Hood" %}
          {%     elif (value == 5) %}
          {%       set result = "Crowded" %}
          {%     elif (value == 6) %}
          {%       set result = "EMT" %}
          {%     elif (value == 7) %}
          {%       set result = "External Stop" %}
          {%     elif (value == 8) %}
          {%       set result = "Extra Controller Alarm" %}
          {%     elif (value == 9) %}
          {%       set result = "Fireplace" %}
          {%     elif (value == 10) %}
          {%       set result = "Holiday" %}
          {%     elif (value == 11) %}
          {%       set result = "Refresh" %}
          {%     elif (value == 12) %}
          {%       set result = "RGS" %}
          {%     elif (value == 13) %}
          {%       set result = "Change Over Feedback" %}
          {%     elif (value == 14) %}
          {%       set result = "Fire Alarm" %}
          {%     elif (value == 15) %}
          {%       set result = "Configurable digital input 1" %}
          {%     elif (value == 16) %}
          {%       set result = "Configurable digital input 2" %}
          {%     elif (value == 17) %}
          {%       set result = "Configurable digital input 3" %}
          {%     elif (value == 18) %}
          {%       set result = "Pressure Guard" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the digital type for universal input 2.
      # Modbus register in configuration: REG_UI_CONNECTION_DIGITAL2
      # Logic:
      # 0: Inactive Input
      # 1: Away
      # 2: Bypass Damper (BYS)
      # 3: Vacuum Cleaner
      # 4: Cooker Hood
      # 5: Crowded
      # 6: EMT
      # 7: External Stop
      # 8: Extra Controller Alarm
      # 9: Fireplace
      # 10: Holiday
      # 11: Refresh
      # 12: RGS
      # 13: Change Over Feedback
      # 14: Fire Alarm
      # 15: Configurable digital input 1
      # 16: Configurable digital input 2
      # 17: Configurable digital input 3
      # 18: Pressure Guard
      - name: Systemair read universal input 2 digital type
        unique_id: systemair_universal_input_2_digital_type
        state_class: measurement
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_DIGITAL2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather the digital type for universal input 2, to string.
      # Modbus register in configuration: REG_UI_CONNECTION_DIGITAL2
      # Logic:
      # 0: Inactive Input
      # 1: Away
      # 2: Bypass Damper (BYS)
      # 3: Vacuum Cleaner
      # 4: Cooker Hood
      # 5: Crowded
      # 6: EMT
      # 7: External Stop
      # 8: Extra Controller Alarm
      # 9: Fireplace
      # 10: Holiday
      # 11: Refresh
      # 12: RGS
      # 13: Change Over Feedback
      # 14: Fire Alarm
      # 15: Configurable digital input 1
      # 16: Configurable digital input 2
      # 17: Configurable digital input 3
      # 18: Pressure Guard
      - name: Systemair read universal input 2 digital type str
        unique_id: systemair_universal_input_2_digital_type_str
        icon: mdi:import
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_UI_CONNECTION_DIGITAL2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set value = int(value) %}
          {%     if (value == 0) %}
          {%       set result = "Inactive Input" %}
          {%     elif (value == 1) %}
          {%       set result = "Away" %}
          {%     elif (value == 2) %}
          {%       set result = "Bypass Damper (BYS)" %}
          {%     elif (value == 3) %}
          {%       set result = "Vacuum Cleaner" %}
          {%     elif (value == 4) %}
          {%       set result = "Cooker Hood" %}
          {%     elif (value == 5) %}
          {%       set result = "Crowded" %}
          {%     elif (value == 6) %}
          {%       set result = "EMT" %}
          {%     elif (value == 7) %}
          {%       set result = "External Stop" %}
          {%     elif (value == 8) %}
          {%       set result = "Extra Controller Alarm" %}
          {%     elif (value == 9) %}
          {%       set result = "Fireplace" %}
          {%     elif (value == 10) %}
          {%       set result = "Holiday" %}
          {%     elif (value == 11) %}
          {%       set result = "Refresh" %}
          {%     elif (value == 12) %}
          {%       set result = "RGS" %}
          {%     elif (value == 13) %}
          {%       set result = "Change Over Feedback" %}
          {%     elif (value == 14) %}
          {%       set result = "Fire Alarm" %}
          {%     elif (value == 15) %}
          {%       set result = "Configurable digital input 1" %}
          {%     elif (value == 16) %}
          {%       set result = "Configurable digital input 2" %}
          {%     elif (value == 17) %}
          {%       set result = "Configurable digital input 3" %}
          {%     elif (value == 18) %}
          {%       set result = "Pressure Guard" %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

  - binary_sensor:
      # We want to gather the fan speed level for mode: manual.
      # Modbus register in configuration: REG_FAN_MANUAL_STOP_ALLOWED
      - name: Systemair read fan manual stop allowed
        unique_id: systemair_read_fan_manual_stop_allowed
        icon: mdi:fan-off
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FAN_MANUAL_STOP_ALLOWED"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the ECO mode configuration status.
      # Modbus register in configuration: REG_ECO_MODE_ON_OFF
      - name: Systemair read ECO mode configuration status
        unique_id: systemair_read_eco_mode_configuration_status
        icon: mdi:sprout
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ECO_MODE_ON_OFF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the filter replacement alarm.
      # Modbus register in configuration: REG_FILTER_REPLACEMENT_ALARM
      - name: Systemair read filter replacement alarm
        unique_id: systemair_read_filter_replacement_alarm
        icon: mdi:air-filter
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FILTER_REPLACEMENT_ALARM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the filter warning alarm.
      # Modbus register in configuration: REG_ALARM_FILTER_WARNING_ALARM
      - name: Systemair read filter warning alarm
        unique_id: systemair_read_filter_warning_alarm
        icon: mdi:air-filter
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ALARM_FILTER_WARNING_ALARM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about the filter alarm.
      # Modbus register in configuration: REG_ALARM_FILTER_ALARM
      - name: Systemair read filter alarm
        unique_id: systemair_read_filter_alarm
        icon: mdi:air-filter
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ALARM_FILTER_ALARM"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about alarm type A.
      # Type A alarms are:
      # - Frost protection
      # - Frost protection temperature sensor
      # - Defrosting error
      # - Supply air fan feedback
      # - Extract air fan feedback
      # - Supply air fan control error
      # - Extract air fan control error
      # - Fire alarm
      # - Low supply air temperature alarm.
      # Modbus register in configuration: REG_ALARM_TYPE_A
      - name: Systemair read alarm type a
        unique_id: systemair_read_alarm_type_a
        icon: mdi:alarm-light
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ALARM_TYPE_A"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about alarm type B.
      # Type B alarms are:
      # - Emergency thermostat
      # - Bypass damper
      # - Rotor guard
      # - Outdoor air temperature sensor
      # - Overheat temperature sensor
      # - Supply air temperature sensor
      # - Room air temperature sensor
      # - Extract air temperature sensor
      # - Extra controller temperature sensor
      # - Efficiency temperature sensor
      # - In-built relative humidity sensor
      # - In-built extract air temperature sensor
      # - Extra controller alarm
      # - Bypass damperfeedback
      # Modbus register in configuration: REG_ALARM_TYPE_B
      - name: Systemair read alarm type b
        unique_id: systemair_read_alarm_type_b
        icon: mdi:alarm-light
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ALARM_TYPE_B"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information about alarm type C.
      # Type C alarms are:
      # - Filter; External stop
      # - Heater overheat
      # - External CO 2 sensor
      # - External relative humidity sensor
      # - Filter warning
      # Modbus register in configuration: REG_ALARM_TYPE_C
      - name: Systemair read alarm type c
        unique_id: systemair_read_alarm_type_c
        icon: mdi:alarm-light
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ALARM_TYPE_C"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information if the heat exchanger is on (heat recovery).
      # Modbus register in configuration: REG_FUNCTION_ACTIVE_HEAT_RECOVERY
      - name: Systemair read heat exchanger on
        unique_id: systemair_read_heat_exchanger_on
        icon: mdi:heat-pump
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FUNCTION_ACTIVE_HEAT_RECOVERY"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information if the heater is on.
      # Modbus register in configuration: REG_FUNCTION_ACTIVE_HEATING
      - name: Systemair read heater on
        unique_id: systemair_read_heater_on
        icon: mdi:heat-wave
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FUNCTION_ACTIVE_HEATING"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information the rotor relative humidity transfer control mode.
      # Modbus register in configuration: REG_ROTOR_RH_TRANSFER_CTRL_ON_OFF
      - name: Systemair read rotor relative humidity transfer control_mode
        unique_id: systemair_read_rotor_relative_humidity_transfer_control_mode
        icon: mdi:water-percent-alert
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_ROTOR_RH_TRANSFER_CTRL_ON_OFF"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information if the rotor relative humidity transfer control is on (active moisture transfer).
      # Modbus register in configuration: REG_FUNCTION_ACTIVE_MOISTURE_TRANSFER
      - name: Systemair read rotor relative humidity transfer control_on
        unique_id: systemair_read_rotor_relative_humidity_transfer_control_on
        icon: mdi:water-percent-alert
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FUNCTION_ACTIVE_MOISTURE_TRANSFER"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information if the defrosting is on.
      # Modbus register in configuration: REG_FUNCTION_ACTIVE_DEFROSTING
      - name: Systemair read function active defrosting on
        unique_id: systemair_read_function_active_defrosting_on
        icon: mdi:snowflake-melt
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FUNCTION_ACTIVE_DEFROSTING"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information if the heater is cooling down.
      # Modbus register in configuration: REG_FUNCTION_ACTIVE_HEATER_COOL_DOWN
      - name: Systemair read function active heater cool down on
        unique_id: systemair_read_function_active_heater_cool_down_on
        icon: mdi:heat-wave
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_FUNCTION_ACTIVE_HEATER_COOL_DOWN"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

      # We want to gather information if the pressure sensor we have on the channel from the kitchen fan is enabled.
      # The pressure sensor is connected to digital input 2, and is set to trigger the Cooker hood-mode.
      # Modbus register in configuration: REG_INPUT_DIGITAL_UI_2
      - name: Systemair read kitchen fan pressure sensor on
        unique_id: systemair_read_kitchen_fan_pressure_sensor_on
        icon: mdi:fan-chevron-up
        state: >
          {% set value_json = state_attr('sensor.systemair_save_connect_response', 'response') %}
          {% set device_type = states('input_select.systemair_chosen_unit_type') %}
          {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none' or value_json == None ) %}
          {%   set inputs_valid = false %}
          {% elif (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
          {%   set inputs_valid = false %}
          {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set register = json_array[device_type]["REG_INPUT_DIGITAL_UI_2"].register | string %}
          {%   set value = value_json[register] %}
          {%   if (value == 'unknown' or value == 'unavailable' or value == 'none' or value == None ) %}
          {%     set result = none %}
          {%   else %}
          {%     set result = int(value) %}
          {%   endif %}
          {% endif %}
          {{ result }}

rest_command:
  # We want to write to the Save Connect.
  # Data used is:
  #   register: "REGISTERNAME"
  #   value: VALUETOWRITE }
  #
  # Note that:
  # - Register must be a valid register-name from sensor systemair_configuration.
  # - Value must be a valid number. See logic for each register.
  #
  # Example to set temperature setpoint to 17 degrees celcius.
  #   The following data:
  #     register: "REG_TC_SP"
  #     value: 170
  #   Gives the following write-command: "http://192.168.4.118/mwrite?{%222000%22:170}" returns "OK", with status code 200.
  systemair_write_to_register:
    url: >
      {% set device_type = states('input_select.systemair_chosen_unit_type') %}
      {% set device_ip = states('input_text.systemair_save_connect_device_ip') %}
      {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
      {% set input_register = register %}
      {% set input_value = value %}
      {% set inputs_valid = true %}
      {% set result = none %}
      {% if (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
      {%     set inputs_valid = false %}
      {% elif (device_ip == 'unknown' or device_ip == 'unavailable' or device_ip == 'none') %}
      {%     set inputs_valid = false %}
      {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
      {%     set inputs_valid = false %}
      {% elif (input_register == 'unknown' or input_register == 'unavailable' or input_register == 'none' or input_register == None) %}
      {%     set inputs_valid = false %}
      {% elif (input_value == 'unknown' or input_value == 'unavailable' or input_value == 'none' or input_value == None) %}
      {%     set inputs_valid = false %}
      {% endif %}
      {% if (inputs_valid == true) %}
      {%   set input_value = input_value | string %}
      {%   set register = json_array[device_type][input_register].register | string %}
      {%   set url = "http://" + device_ip + "/mwrite?" %}
      {%   set url = url + '{%22' + register + '%22:' + input_value + '}' %}
      {%   set result = url %}
      {% endif %}
      {{ result }}
    method: GET
    content_type: "text/plain"
    headers:
      Connection: close

input_button:
  set_temperature:
    name: Set temperature
    icon: mdi:bell

automation:
  - alias: "Press temperature button"
    triggers:
      - trigger: state
        entity_id: input_button.set_temperature
    actions:
      - action: rest_command.systemair_write_to_register
        data:
          register: "REG_TC_SP"
          value: 170
        response_variable: systemair_write_response
      - if: "{{ systemair_write_response['status'] == 200 }}"
        then:
          - action: system_log.write
            data:
              title: "Success: Wrote to Systemair Save Connect"
              message: "Success. Content: {{ systemair_write_response['content'] }}"
              level: warning
        else:
          - action: system_log.write
            data:
              title: "Error: Wrote to Systemair Save Connect"
              message: "Error. Content: {{ systemair_write_response['content'] }}"
              level: warning

rest:
  # To not overflow the Save Connect device, we gather all data we need in one rest-sensor, and go divide the sensors in different priorities.
  #   The priorities are:
  #     Prio 0: Added every time.
  #     Prio 1 through 8: First 1, then 2 and lastly 8, then over again with 1.
  # 20250222: Changed from 3 to 8 since it seems like the modbus on the heat exchanger gets overwhelmed after 1-2 day.
  #           Also reduced the sensors to always retrieve (0), so we have a maximum of approx. 20 registers each rest-call.
  # 20250804: Changed from 30 seconds to 60 seconds scan-interval, since the SaveConnect locks itself from time to time.
  # Therefore it will take up to 3 rest-calls until all registry-values are collected.
  #
  # Note:
  # - That all priority levels (1 through 3, not 0) must exist in 'sensor.systemair_configuration'.
  #   - For instance prio 2 must exists in at least one of the rows.
  # - In total the reponse for each priority (incl. prio 0) must not exceed 4x255 characters.
  # - Before this last code was finalized, we tried to utilize several rest-calls, but that seemed to swamp the Save Connect device
  #   - We also tried to have only one rest-call with all registries, but that seemed to also swamp the Save Connect device.
  #     - So we ended up with this code that works with template sensor 'systemair_save_connect_response' to gather all the required registers ov er three calls.
  # Example request: http://IPADDRESS/mread?{%221130%22:1,%221160%22:1,%221352%22:1,%222000%22:1,%222132%22:1,%222504%22:1,%229002%22:1,%2212100%22:1,%2212101%22:1,%2212102%22:1,%2212103%22:1,%2212104%22:1,%2212107%22:1,%2212135%22:1,%2212400%22:1,%2212401%22:1,%2212543%22:1,%2213021%22:1,%2214000%22:1,%2214001%22:1}
  - scan_interval: 60
    timeout: 10
    resource_template: >
      {% set device_type = states('input_select.systemair_chosen_unit_type') %}
      {% set device_ip = states('input_text.systemair_save_connect_device_ip') %}
      {% set json_array = state_attr('sensor.systemair_configuration', 'configuration') %}
      {% set filter_priority = states('sensor.systemair_save_connect_response_priority') %}
      {% set inputs_valid = true %}
      {% set result = none %}
      {% if (device_type == 'unknown' or device_type == 'unavailable' or device_type == 'none' or device_type == None) %}
      {%     set inputs_valid = false %}
      {% elif (device_ip == 'unknown' or device_ip == 'unavailable' or device_ip == 'none') %}
      {%     set inputs_valid = false %}
      {% elif (json_array == 'unknown' or json_array == 'unavailable' or json_array == 'none' or json_array == None or json_array == {} or json_array == '{}None') %}
      {%     set inputs_valid = false %}
      {% elif (filter_priority == 'unknown' or filter_priority == 'unavailable' or filter_priority == 'none' or filter_priority ==  None) %}
      {%     set filter_priority = 1 %}
      {% endif %}
      {% if (inputs_valid == true) %}
      {%   set filter_priority = filter_priority | int %}
      {%   set entries_valid = true %}
      {%   set entries = json_array[device_type] %}
      {%   if (entries == 'unknown' or entries == 'unavailable' or entries == 'none') %}
      {%     set entries_valid = false %}
      {%   endif %}
      {%   if (entries_valid == true) %}
      {%     set ns = namespace(url = "http://" + device_ip + "/mread?", index = 0) %}
      {%     for entry in entries %}
      {%       set json_valid = true %}
      {%       set register = json_array[device_type][entry].register | string %}
      {%       set prio = json_array[device_type][entry].prio | string %}
      {%       if (register == 'unknown' or register == 'unavailable' or register == 'none') %}
      {%         set json_valid = false %}
      {%       elif (prio == 'unknown' or prio == 'unavailable' or prio == 'none') %}
      {%         set json_valid = false %}
      {%       endif %}
      {%       if (json_valid == true) %}
      {%         set prio = prio | int %}
      {%         if (filter_priority == prio or prio == 0) %}
      {%           if (ns.index == 0) %}
      {%             set ns.url = ns.url + "{" %}
      {%           else %}
      {%             set ns.url = ns.url + "," %}
      {%           endif %}
      {%           set ns.url = ns.url + "%22" + register + "%22:1" %}
      {%           set ns.index = ns.index + 1 %}
      {%         endif %}
      {%       endif %}
      {%     endfor %}
      {%     set ns.url = ns.url + "}" %}
      {%     set result = ns.url %}
      {%   endif %}
      {% endif %}
      {{ result }}
    headers:
      Connection: close
    sensor:
      # We want to increment the index from 1 to 8.
      - name: Systemair save connect response priority
        unique_id: systemair_save_connect_response_priority
        value_template: >
          {% set current_value = states('sensor.systemair_save_connect_response_priority') %}
          {% if (current_value == 'unknown' or current_value == 'unavailable' or current_value == 'none' or current_value == None) %}
          {%   set current_value = 1 %}
          {% else %}
          {%   set current_value = current_value | int %}
          {% endif %}
          {% set current_value = current_value + 1 %}
          {% if (current_value > 8) %}
          {%   set current_value = 1 %}
          {% endif %}
          {% set result = current_value %}
          {{ result }}
      # We want to gather the length of the response.
      - name: Systemair Save connect response length
        unique_id: systemair_save_connect_response_length
        value_template: >
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none'  or value_json == None or value_json == '{}') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set value = value_json %}
          {%   set value = value | replace("'", '"') %}
          {%   set result = value | count %}
          {% endif %}
          {{ result }}
      # We want to gather characters 0-254 in the response as state.
      # As a sensor can maximum have 255 characters.
      - name: Systemair Save connect response 1 part
        unique_id: systemair_save_connect_response_1_part
        value_template: >
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none'  or value_json == None or value_json == '{}') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set value = value_json %}
          {%   set result = value | replace("'", '"') %}
          {%   set length = result | count %}
          {%   if (length > 0) %}
          {%     set result = result[0:255] %}
          {%   else %}
          {%     set result = none %}
          {%   endif %}
          {% endif %}
          {{ result }}
      # We want to gather characters 255-510 in the response as state.
      # As a sensor can maximum have 255 characters.
      - name: Systemair Save connect response 2 part
        unique_id: systemair_save_connect_response_2_part
        value_template: >
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none'  or value_json == None or value_json == '{}') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set value = value_json %}
          {%   set result = value | replace("'", '"') %}
          {%   set length = result | count %}
          {%   if (length > 255) %}
          {%     set result = result[255:510] %}
          {%   else %}
          {%     set result = none %}
          {%   endif %}
          {% endif %}
          {{ result }}
      # We want to gather characters 510-765 in the response as state.
      # As a sensor can maximum have 255 characters.
      - name: Systemair Save connect response 3 part
        unique_id: systemair_save_connect_response_3_part
        value_template: >
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none'  or value_json == None or value_json == '{}') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set value = value_json %}
          {%   set result = value | replace("'", '"') %}
          {%   set length = result | count %}
          {%   if (length > 510) %}
          {%     set result = result[510:765] %}
          {%   else %}
          {%     set result = none %}
          {%   endif %}
          {% endif %}
          {{ result }}
      # We want to gather characters 765-1020 in the response as state.
      # As a sensor can maximum have 255 characters.
      - name: Systemair Save connect response 4 part
        unique_id: systemair_save_connect_response_4_part
        value_template: >
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (value_json == 'unknown' or value_json == 'unavailable' or value_json == 'none'  or value_json == None or value_json == '{}') %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set value = value_json %}
          {%   set result = value | replace("'", '"') %}
          {%   set length = result | count %}
          {%   if (length > 510) %}
          {%     set result = result[765:1020] %}
          {%   else %}
          {%     set result = none %}
          {%   endif %}
          {% endif %}
          {{ result }}
