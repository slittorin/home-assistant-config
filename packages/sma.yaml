# This file includes all the entities for tracking sensor related to SMA Inverter and Home Manager.

# Sampling size is set to 720 since we want all samples for the last hour, where SMA updates every 5 second.

# Updates made for Core updates and breaking changes:
# --------------------------------------------------------
# 20221108 - Clear to upgrade to 2022.6.7 from 2022.5.3: https://www.home-assistant.io/blog/2022/06/01/release-20226/#breaking-changes Template filter/function defaults

# 20221011 - Added hourly statistics for: grid_power and metering_power_supplied.

sensor:
  # We want to get the min statistics for the current (A) on line 1.
  - platform: statistics
    name: SMA metering current l1 min
    unique_id: sma_metering_current_l1_min
    entity_id: sensor.metering_current_l1
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for the current (A) on line 1.
  - platform: statistics
    name: SMA metering current l1 mean
    unique_id: sma_metering_current_l1_mean
    entity_id: sensor.metering_current_l1
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for the current (A) on line 1.
  - platform: statistics
    name: SMA metering current l1 max
    unique_id: sma_metering_current_l1_max
    entity_id: sensor.metering_current_l1
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for the current (A) on line 2.
  - platform: statistics
    name: SMA metering current l2 min
    unique_id: sma_metering_current_l2_min
    entity_id: sensor.metering_current_l2
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for the current (A) on line 2.
  - platform: statistics
    name: SMA metering current l2 mean
    unique_id: sma_metering_current_l2_mean
    entity_id: sensor.metering_current_l2
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for the current (A) on line 2.
  - platform: statistics
    name: SMA metering current l2 max
    unique_id: sma_metering_current_l2_max
    entity_id: sensor.metering_current_l2
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for the current (A) on line 3.
  - platform: statistics
    name: SMA metering current l3 min
    unique_id: sma_metering_current_l3_min
    entity_id: sensor.metering_current_l3
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for the current (A) on line 3.
  - platform: statistics
    name: SMA metering current l3 mean
    unique_id: sma_metering_current_l3_mean
    entity_id: sensor.metering_current_l3
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for the current (A) on line 3.
  - platform: statistics
    name: SMA metering current l3 max
    unique_id: sma_metering_current_l3_max
    entity_id: sensor.metering_current_l3
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_power_absorbed.
  - platform: statistics
    name: SMA metering power absorbed min
    unique_id: sma_metering_power_absorbed_min
    entity_id: sensor.metering_power_absorbed
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_power_absorbed.
  - platform: statistics
    name: SMA metering power absorbed mean
    unique_id: sma_metering_power_absorbed_mean
    entity_id: sensor.metering_power_absorbed
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_power_absorbed.
  - platform: statistics
    name: SMA metering power absorbed max
    unique_id: sma_metering_power_absorbed_max
    entity_id: sensor.metering_power_absorbed
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_draw_l1.
  - platform: statistics
    name: SMA metering active power draw l1 min
    unique_id: sma_metering_active_power_draw_l1_min
    entity_id: sensor.metering_active_power_draw_l1
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_draw_l1.
  - platform: statistics
    name: SMA metering active power draw l1 mean
    unique_id: sma_metering_active_power_draw_l1_mean
    entity_id: sensor.metering_active_power_draw_l1
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_draw_l1.
  - platform: statistics
    name: SMA metering active power draw l1 max
    unique_id: sma_metering_active_power_draw_l1_max
    entity_id: sensor.metering_active_power_draw_l1
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_draw_l2.
  - platform: statistics
    name: SMA metering active power draw l2 min
    unique_id: sma_metering_active_power_draw_l2_min
    entity_id: sensor.metering_active_power_draw_l2
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_draw_l2.
  - platform: statistics
    name: SMA metering active power draw l2 mean
    unique_id: sma_metering_active_power_draw_l2_mean
    entity_id: sensor.metering_active_power_draw_l2
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_draw_l2.
  - platform: statistics
    name: SMA metering active power draw l2 max
    unique_id: sma_metering_active_power_draw_l2_max
    entity_id: sensor.metering_active_power_draw_l2
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_draw_l3.
  - platform: statistics
    name: SMA metering active power draw l3 min
    unique_id: sma_metering_active_power_draw_l3_min
    entity_id: sensor.metering_active_power_draw_l3
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_draw_l3.
  - platform: statistics
    name: SMA metering active power draw l3 mean
    unique_id: sma_metering_active_power_draw_l3_mean
    entity_id: sensor.metering_active_power_draw_l3
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_draw_l3.
  - platform: statistics
    name: SMA metering active power draw l3 max
    unique_id: sma_metering_active_power_draw_l3_max
    entity_id: sensor.metering_active_power_draw_l3
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_frequency.
  - platform: statistics
    name: SMA metering frequency min
    unique_id: sma_metering_frequency_min
    entity_id: sensor.metering_frequency
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_frequency.
  - platform: statistics
    name: SMA metering frequency mean
    unique_id: sma_metering_frequency_mean
    entity_id: sensor.metering_frequency
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_frequency.
  - platform: statistics
    name: SMA metering frequency max
    unique_id: sma_metering_frequency_max
    entity_id: sensor.metering_frequency
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for grid_power.
  - platform: statistics
    name: SMA grid power min
    unique_id: sma_grid_power_min
    entity_id: sensor.grid_power
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for grid_power.
  - platform: statistics
    name: SMA grid power mean
    unique_id: sma_grid_power_mean
    entity_id: sensor.grid_power
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for grid_power.
  - platform: statistics
    name: SMA grid power max
    unique_id: sma_grid_power_max
    entity_id: sensor.grid_power
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_power_supplied.
  - platform: statistics
    name: SMA metering power supplied min
    unique_id: sma_metering_power_supplied_min
    entity_id: sensor.metering_power_supplied
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_power_supplied.
  - platform: statistics
    name: SMA metering power supplied mean
    unique_id: sma_metering_power_supplied_mean
    entity_id: sensor.metering_power_supplied
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_power_supplied.
  - platform: statistics
    name: SMA metering power supplied max
    unique_id: sma_metering_power_supplied_max
    entity_id: sensor.metering_power_supplied
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for pv_current_a
  - platform: statistics
    name: SMA pv current a min
    unique_id: sma_pv_current_a_min
    entity_id: sensor.pv_current_a
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_current_a
  - platform: statistics
    name: SMA pv current a mean
    unique_id: sma_pv_current_a_mean
    entity_id: sensor.pv_current_a
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_current_a
  - platform: statistics
    name: SMA pv current a max
    unique_id: sma_pv_current_a_max
    entity_id: sensor.pv_current_a
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the min statistics for pv_current_b
  - platform: statistics
    name: SMA pv current b min
    unique_id: sma_pv_current_b_min
    entity_id: sensor.pv_current_b
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_current_b
  - platform: statistics
    name: SMA pv current b mean
    unique_id: sma_pv_current_b_mean
    entity_id: sensor.pv_current_b
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_current_b
  - platform: statistics
    name: SMA pv current b max
    unique_id: sma_pv_current_b_max
    entity_id: sensor.pv_current_b
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the min statistics for pv_power_a
  - platform: statistics
    name: SMA pv power a min
    unique_id: sma_pv_power_a_min
    entity_id: sensor.pv_power_a
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_power_a
  - platform: statistics
    name: SMA pv power a mean
    unique_id: sma_pv_power_a_mean
    entity_id: sensor.pv_power_a
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_power_a
  - platform: statistics
    name: SMA pv power a max
    unique_id: sma_pv_power_a_max
    entity_id: sensor.pv_power_a
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the min statistics for pv_power_b
  - platform: statistics
    name: SMA pv power b min
    unique_id: sma_pv_power_b_min
    entity_id: sensor.pv_power_b
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_power_b
  - platform: statistics
    name: SMA pv power b mean
    unique_id: sma_pv_power_b_mean
    entity_id: sensor.pv_power_b
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_power_b
  - platform: statistics
    name: SMA pv power b max
    unique_id: sma_pv_power_b_max
    entity_id: sensor.pv_power_b
    state_characteristic: value_max
    max_age:
      hours: 1
  # Keep track of how long solar power is produced each hour.
  - platform: history_stats
    name: SMA solar power produced time hour
    entity_id: binary_sensor.sma_solar_power_producing
    state: 'on'
    type: time
    start: "{{ now().replace(minute=0, second=0) }}"
    end: "{{ now() }}"
  # We want to get the min statistics for metering_active_power_feed_l1
  - platform: statistics
    name: SMA metering active power feed l1 min
    unique_id: sma_metering_active_power_feed_l1_min
    entity_id: sensor.metering_active_power_feed_l1
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_feed_l1
  - platform: statistics
    name: SMA metering active power feed l1 max
    unique_id: sma_metering_active_power_feed_l1_max
    entity_id: sensor.metering_active_power_feed_l1
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_feed_l1
  - platform: statistics
    name: SMA metering active power feed l1 mean
    unique_id: sma_metering_active_power_feed_l1_mean
    entity_id: sensor.metering_active_power_feed_l1
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l2 min
    unique_id: sma_metering_active_power_feed_l2_min
    entity_id: sensor.metering_active_power_feed_l2
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l2 max
    unique_id: sma_metering_active_power_feed_l2_max
    entity_id: sensor.metering_active_power_feed_l2
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l2 mean
    unique_id: sma_metering_active_power_feed_l2_mean
    entity_id: sensor.metering_active_power_feed_l2
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_feed_l3
  - platform: statistics
    name: SMA metering active power feed l3 min
    unique_id: sma_metering_active_power_feed_l3_min
    entity_id: sensor.metering_active_power_feed_l3
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l3 max
    unique_id: sma_metering_active_power_feed_l3_max
    entity_id: sensor.metering_active_power_feed_l3
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l3 mean
    unique_id: sma_metering_active_power_feed_l3_mean
    entity_id: sensor.metering_active_power_feed_l3
    state_characteristic: mean
    max_age:
      hours: 1


template:
  - binary_sensor:
      # We want to know when solar power is produced.
      - name: SMA solar power producing
        unique_id: sma_solar_power_producing
        state: >
          {% set solar_power = states('sensor.grid_power') %}
          {% set result = false %}
          {% set inputs_valid = false %}
          {% if (solar_power != 'unknown' and solar_power != 'unavailable') %}
          {%   set solar_power = float(solar_power, default=0) %}
          {%   set inputs_valid = true %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   if (solar_power > 0) %}
          {%     set result = true %}
          {%   endif %}
          {% endif %}
          {{ result }}

  - trigger:
      # Trigger at the end of every hour, since we want the sensor value to be set for the hour.
      # We trigger this one second before we run other statistics that we need more precise.
      # 20230102: Changed from 59.58 to 59.56 to further add space before 59.58 each hour.
      - platform: time_pattern
        hours: "/1"
        minutes: "59"
        seconds: "56"
    sensor:
      # We save sma_metering_current_l1_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l1_min_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l1_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l1_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l1_mean_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l1_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l1_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l1_max_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l1_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l2_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l2_min_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l2_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l2_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l2_mean_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l2_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l2_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l2_max_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l2_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l3_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l3_min_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l3_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l3_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l3_mean_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l3_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l3_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l3_max_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l3_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_absorbed_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_absorbed_min_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_absorbed_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_absorbed_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_absorbed_mean_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_absorbed_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_absorbed_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_absorbed_max_hour
        device_class: 'current'
        unit_of_measurement: 'A'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_absorbed_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l1_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l1_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l1_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l1_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l1_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l1_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l1_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l1_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l1_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l2_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l2_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l2_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l2_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l2_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l2_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l2_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l2_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l2_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l3_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l3_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l3_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l3_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l3_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l3_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l3_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l3_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l3_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_frequency_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_frequency_min_hour
        device_class: 'frequency'
        unit_of_measurement: 'Hz'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_frequency_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_frequency_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_frequency_mean_hour
        device_class: 'frequency'
        unit_of_measurement: 'Hz'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_frequency_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_frequency_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_frequency_max_hour
        device_class: 'frequency'
        unit_of_measurement: 'Hz'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_frequency_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_grid_power_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_grid_power_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_grid_power_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_grid_power_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_grid_power_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_grid_power_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_grid_power_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_grid_power_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_grid_power_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_supplied_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_supplied_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_supplied_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_supplied_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_supplied_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_supplied_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_supplied_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_supplied_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_supplied_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_a_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_a_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_a_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_a_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_a_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_a_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_a_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_a_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_a_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_b_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_b_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_b_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_b_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_b_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_b_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_b_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_b_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_b_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_a_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_a_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_a_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_a_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_a_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_a_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_a_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_a_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_a_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_b_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_b_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_b_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_b_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_b_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_b_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_b_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_b_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_b_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save metering_total_absorbed each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_metering_total_absorbed_hour
        device_class: 'energy'
        unit_of_measurement: 'kWh'
        state_class: total_increasing
        state: >
          {% set input = states('sensor.metering_total_absorbed') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save metering_total_absorbed_cost each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_metering_total_absorbed_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: total
        state: >
          {% set input = states('sensor.metering_total_absorbed_cost') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_solar_power_produced_time_hour each hour.
      - name: sma_solar_power_produced_time_hour_last
        unit_of_measurement: 'time'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_solar_power_produced_time_hour') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save pv_gen_meter each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_pv_gen_meter_hour
        device_class: 'energy'
        unit_of_measurement: 'kWh'
        state_class: total_increasing
        state: >
          {% set input = states('sensor.pv_gen_meter') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save total_yield each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_total_yield_hour
        device_class: 'energy'
        unit_of_measurement: 'kWh'
        state_class: total_increasing
        state: >
          {% set input = states('sensor.total_yield') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save metering_total_yield each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_metering_total_yield_hour
        device_class: 'energy'
        unit_of_measurement: 'kWh'
        state_class: total_increasing
        state: >
          {% set input = states('sensor.metering_total_yield') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save daily_yield each hour.
      - name: sma_daily_yield_hour
        unit_of_measurement: 'Wh'
        state_class: measurement
        state: >
          {% set input = states('sensor.daily_yield') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}



      # We save sma_metering_active_power_feed_l1_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l1_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l1_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l1_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l1_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l1_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l1_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l1_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l1_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l2_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l2_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l2_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l2_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l2_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l2_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l2_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l2_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l2_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l3_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l3_min_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l3_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l3_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l3_max_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l3_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l3_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l3_mean_hour
        device_class: 'power'
        unit_of_measurement: 'W'
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l3_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}