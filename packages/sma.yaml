# This file includes all the entities for tracking sensor related to SMA Inverter and Home Manager.

# Sampling size is set to 720 since we want all samples for the last hour, where SMA updates every 5 second.

# Updates made for Core updates and breaking changes:
# --------------------------------------------------------
# 20221108 - Clear to upgrade to 2022.6.7 from 2022.5.3: https://www.home-assistant.io/blog/2022/06/01/release-20226/#breaking-changes Template filter/function defaults
# 20221011 - Added hourly statistics for: grid_power and metering_power_supplied.
# 20241218 - Something happened at roughly 01:30, nearly all sensors for SMA failed to retrieve values. After removing and adding the SMA-integration again, sensors appeared.
#            However, they now had the sensor name altered 'sn_3006917520_daily_yield', i.e. added serial number to sensor.
#            No clue why, no reboot at the time, or intergration/HA upgraded.
#            I manually altered the following sensors to get back history data, and to not need to change yaml:
#            - sn_3006917520_metering_current_l1            to metering_current_l1
#            - sn_3006917520_metering_current_l2            to metering_current_l2
#            - sn_3006917520_metering_current_l3            to metering_current_l3
#            - sn_3006917520_daily_yield                    to daily_yield
#            - sn_3006917520_grid_power                     to grid_power
#            - sn_3006917520_metering_power_absorbed        to metering_power_absorbed
#            - sn_3006917520_metering_power_supplied        to metering_power_supplied
#            - sn_3006917520_metering_total_yield           to metering_total_yield
#            - sn_3006917520_metering_total_absorbed        to metering_total_absorbed
#            - sn_3006917520_total_yield                    to total_yield
#            - sn_3006917520_inverter_power_limit           to inverter_power_limit (not really needed, but changed anyway)
#            - sn_3006917520_metering_active_power_draw_l1  to metering_active_power_draw_l1
#            - sn_3006917520_metering_active_power_draw_l2  to metering_active_power_draw_l2
#            - sn_3006917520_metering_active_power_draw_l3  to metering_active_power_draw_l3
#            - sn_3006917520_metering_active_power_feed_l1  to metering_active_power_feed_l1
#            - sn_3006917520_metering_active_power_feed_l2  to metering_active_power_feed_l2
#            - sn_3006917520_metering_active_power_feed_l3  to metering_active_power_feed_l3
#            - sn_3006917520_metering_frequency             to metering_frequency
#            - sn_3006917520_pv_current_a                   to pv_current_a
#            - sn_3006917520_pv_current_b                   to pv_current_b
#            - sn_3006917520_pv_gen_meter                   to pv_gen_meter
#            - sn_3006917520_pv_power                       to pv_power
#            - sn_3006917520_pv_power_a                     to pv_power_a
#            - sn_3006917520_pv_power_b                     to pv_power_b
#            - sn_3006917520_status                         to status
#            Not changed:
#            - sn_3006917520_current_total
#            - sn_3006917520_status

# https://www.home-assistant.io/integrations/sma/
#
# Solar inverter:
# --------------------------------------------------------
# pv_power	W	Current power provided to the AC side by all the solar panels
# pv_power_a	W	Current power generated on the DC side by the solar panels (A side)
# pv_power_b	W	Current power generated on the DC side by the solar panels (B side)
# pv_voltage_a	V	Current voltage generated by the solar panels (A side)
# pv_voltage_b	V	Current voltage generated by the solar panels (B side)
# pv_current_a	A	Current amperage generated by the solar panels (A side)
# pv_current_b	A	Current amperage generated by the solar panels (B side)
# grid_power	W	Power supplied to the grid by the inverter. grid_power = power_l1 + power_l2 + power_l3
# frequency	Hz	Grid frequency
# current_l1	A	Current for phase 1
# current_l2	A	Current for phase 2
# current_l3	A	Current for phase 3
# voltage_l1	V	Voltage for phase 1
# voltage_l2	V	Voltage for phase 2
# voltage_l3	V	Voltage for phase 3
# power_l1	W	Power for phase 1
# power_l2	W	Power for phase 2
# power_l3	W	Power for phase 3
# total_yield	kWh	Total energy yield from a solar installation
# daily_yield	Wh	The solar plantâ€™s yield for today
# pv_gen_meter	kWh	Total kWh generated to date
#
# Energy meter via inverter:
# --------------------------------------------------------
# metering_power_supplied	W	Power supplied
# metering_power_absorbed	W	Power absorbed
# metering_frequency	Hz	Grid frequency
# metering_total_yield	kWh	Total energy supplied to the grid
# metering_total_absorbed	kWh	Total energy from the grid
# metering_current_l1	A	Current for phase 1
# metering_current_l2	A	Current for phase 2
# metering_current_l3	A	Current for phase 3
# metering_voltage_l1	V	Voltage for phase 1
# metering_voltage_l2	V	Voltage for phase 2
# metering_voltage_l3	V	Voltage for phase 3
# metering_active_power_l1	W	Active Power for phase 1
# metering_active_power_l2	W	Active Power for phase 2
# metering_active_power_l3	W	Active Power for phase 3
# metering_active_power_consumed_l1	W	Active Power Consumed for phase 1
# metering_active_power_consumed_l2	W	Active Power Consumed for phase 2
# metering_active_power_consumed_l3	W	Active Power Consumed for phase 3
#
# Energy meter:
# --------------------------------------------------------
# status		Status of the device
# grid_power	W	Power supplied to the grid. grid_power = power_l1 + power_l2 + power_l3
# frequency	Hz	Grid frequency.
# current_l1	A	Current for phase 1
# current_l2	A	Current for phase 2
# current_l3	A	Current for phase 3
# voltage_l1	V	Voltage for phase 1
# voltage_l2	V	Voltage for phase 2
# voltage_l3	V	Voltage for phase 3
# power_l1	W	Power for phase 1
# power_l2	W	Power for phase 2
# power_l3	W	Power for phase 3
#
# ======================================================================================================================
#
# From end of March 2025, we started to measure the maximum power the house consumes (absorbs) each month.
# This to be able to measure the average of the maxium power over several high-load days for the month.
# All this related to Sweden starting to with 'effekttariff'.
#
# Effekttariff is a tariff based on high and low-load periods, instead of fixed cost related to the size of the main fuse, and a fixed cost per kWh for distributing electricity.
#
# We will measure the maximum power-load in W for high and low-loadperiods, and summarize at the end of the month.
# Note that the electricity provider for my region has not decided yet on how it will be measured, so we take into account several options.
#
# A typical High and low-load periods explained:
# ----------------------------------------------
# 1. High-load months (usually november through march):
#    - On weekdays (monday through friday), the day i split between high and low-load period.
#      - High-load is usually between 6 and 20 hours.
#      - Low-load are the remaining hours.
#      - On weekend the whole day is low-load period.
#      - Note that public holidays and bank holidays also count as weekend (i.e. low-load period).
#        - But we do not take this into account at the moment.
# 2. During low-load months (usually april through october):
#    - All days and hours are low-load periods.
#      - I.e. weekdays and hours are not utilized.
# 3. Some electricity providers reduces the highest load during low-load period by 50%. Thus, incentive to push load to low-load hours.
# 4. At the end of the month the highest load is taken by the average of 2 or multiple readings over the month.
#    - For instance the average of the three highest loads during high-load period during the month.
#
# As there are many options for what is measured and affects the cost for effekttariff, we take into consideration the following:
# -------------------------------------------------------------------------------------------------------------------------------
# - Monthly maximum hourly load.
# - Monthly maximum hourly load, during high-load hours.
# - Monthly maximum hourly load, during low-load hours.
# - Monthly maximum hourly load, during low-load hours, with factor parameter (see below).
# - Monthly maximum hourly-load for the month, for either high-load or low-load hours with reduction parameter.
# By doing this we support many options that can be used by Swedish electricity-providers.
#
# We will not take into account cost at the moment as this has not been set yet by the electricity provider in our region.
# The cost may be calculated towards any of the monthly sensors.
#
# In the logic above and below we have the following parameters:
# --------------------------------------------------------------
# - If enabled (input_boolean.setting_effekttariff_highload_month_enabled):
#   - High-load months, from and to.
#     - input_number.setting_effekttariff_highload_from_month (such as 10 for October)
#     - input_number.setting_effekttariff_highload_to_month (such as 3 for March)
# - If enabled (input_boolean.setting_effekttariff_highload_weekdays_enabled):
#   - High-load weekdays if enabled:
#     - input_boolean.setting_effekttariff_highload_weekday_monday
#     - input_boolean.setting_effekttariff_highload_weekday_tuesday
#     - input_boolean.setting_effekttariff_highload_weekday_wednesday
#     - input_boolean.setting_effekttariff_highload_weekday_thursday
#     - input_boolean.setting_effekttariff_highload_weekday_friday
#     - input_boolean.setting_effekttariff_highload_weekday_saturday
#     - input_boolean.setting_effekttariff_highload_weekday_sunday
# - If enabled (input_boolean.setting_effekttariff_highload_hours_enabled):
#   - High-load hours, from and to:
#     - input_number.setting_effekttariff_highload_from_hour (such as 6, from 6.00).
#     - input_number.setting_effekttariff_highload_to_hour (such as 20, to 20.59.59).
# - Highest load during low-load period is to be recalculated by factor (0 through 1, steps of 0.1).
#   - input_number.setting_effekttariff_lowload_factor
# - The number of highest day-loads (2 through 5) to average at the end of the month.
#   - input_number.setting_effekttariff_number_days_for_average
#
# The sensor that drives the machine is the statistics-sensor that measures the maximum power over one hour:
# ----------------------------------------------------------------------------------------------------------
#   - sensor.sma_metering_power_absorbed_max
#     - This sensor takes the statistics from sensor 'sensor.metering_power_absorbed' that is from the SMA-integration.
# Note that all values are in Watt not kiloWatt.
#
# We have created the following sensors:
# --------------------------------------
# 1. Each hour at 00.02  we set the input sensor (for persistence) 'sma_effekttariff_current_load_period' to high or low-load hour:
#    - Depending on the parameters above:
#      - 0 for no high/low hour, or error in parameters.
#      - 1 for low-load hour.
#      - 2 for high-load hour.
#    - Note: If parameters are changed between 00.02 and 59.56 it is not caught.
# 2. Each hour at 59.56 we take a snapshot of statistics sensor 'sma_metering_power_absorbed_max' into:
#    - sensor.sma_metering_power_absorbed_max_hour
#       - This is the root of all measurements for load (W).
#       - We know that we will not get all/right statistics for the hour as we miss 4 seconds, but that should only have a minor effect.
# 3. Maximum hourly loads (input_numbers to be persistent to reboots and reload of yaml, reset each day at 00.00.02):
#    - input_number.sma_metering_power_absorbed_max_hour_max: The maximum hourly-load.
#    - input_number.sma_metering_power_absorbed_max_hour_max_high_load_period: The maximum hourly-load, during high-load hours.
#    - input_number.sma_metering_power_absorbed_max_hour_max_low_load_period: The maximum hourly-load, during low-load hours.
# 4. Daily maximum loads are created each day at 23.59.57:
#    - sensor.sma_metering_power_absorbed_max_day: The maximum hourly-load for the day.
#    - sensor.sma_metering_power_absorbed_max_day_high_load_period: The maximum hourly-load for the day, during high-load hours.
#    - sensor.sma_metering_power_absorbed_max_day_low_load_period: The maximum hourly-load for the day, during low-load hours.
#    - sensor.sma_metering_power_absorbed_max_day_low_load_factor_period: The maximum hourly-load for the day, during low-load hours with factor parameter.
#    - sensor.sma_metering_power_absorbed_max_day_high_and_low_load_factor_period: The maximum hourly-load for the day, for either high-load or low-load hours with factor parameter.
# 5. Array of 5 maximum days during the month are created after daily maximum are created through trigger (persistent, reset at 00.00.02 at start of each month):
#    - input_text.sma_metering_power_absorbed_max_month_array: Array of 5 maximum load days for the month.
#    - input_text.sma_metering_power_absorbed_max_month_high_load_period_array: Array of 5 maximum high-load days for the month.
#    - input_text.sma_metering_power_absorbed_max_month_low_load_period_array: Array of 5 maximum low-load days for the month.
#    - input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array: Array of 5 maximum low-load, with factor parameter, days for the month.
#    - input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array: Array of 5 maximum for either high-load or low-load days with factor parameter, for the month.
# 6. Monthly maximum loads are created at end of month at 23.59.59 (taken from array):
#    - sensor.sma_metering_power_absorbed_max_month: The maximum dayly-load for the month.
#    - sensor.sma_metering_power_absorbed_max_month_high_load_period: The maximum high-load day for the month.
#    - sensor.sma_metering_power_absorbed_max_month_low_load_period: The maximum low-load day for the month.
#    - sensor.sma_metering_power_absorbed_max_month_low_load_factor_period: The maximum low-load day for the month with factor parameter.
#    - sensor.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period: The maximum hourly-load for the month, for either high-load or low-load hours with factor parameter.
# 7. Monthly average loads are created at end of month at 23.59.59 (taken from array, number of days is set by parameter):
#    - sensor.sma_metering_power_absorbed_average_month: The average dayly-load for the month.
#    - sensor.sma_metering_power_absorbed_average_month_high_load_period: The average high-load day for the month.
#    - sensor.sma_metering_power_absorbed_average_month_low_load_period: The average low-load day for the month.
#    - sensor.sma_metering_power_absorbed_average_month_low_load_factor_period: The average low-load day for the month with factor parameter.
#    - sensor.sma_metering_power_absorbed_average_month_high_and_low_load_factor_period: The maximum hourly-load for the month, for either high-load or low-load hours with factor parameter.
#
# Note the following:
# - The logic and sensors survives reboots.
#   - However, I have seen that reload of template-sensors causes duplicate values to be added to the array-sensors.
#     - So, if you need to reload temp+late-sensors, make sure you alter the array-sensors to original value after reload.

input_boolean:
  # Setting for effekttariff: If high-load period shall be measured for specific months.
  setting_effekttariff_highload_month_enabled:
    name: "If high-load period shall be measured for specific months"
    icon: mdi:priority-high
  # Setting for effekttariff: If high-load period shall be measured for specific weekdays.
  setting_effekttariff_highload_weekdays_enabled:
    name: "If high-load period shall be measured for specific weekdays"
    icon: mdi:priority-high
  # Setting for effekttariff: If high-load period shall be measured for weekday: Monday.
  setting_effekttariff_highload_weekday_monday:
    name: "If high-load period shall be measured for: Monday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for weekday: Tuesday.
  setting_effekttariff_highload_weekday_tuesday:
    name: "If high-load period shall be measured for: Tuesday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for weekday: Wednesday.
  setting_effekttariff_highload_weekday_wednesday:
    name: "If high-load period shall be measured for: Wednesday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for weekday: Thursday.
  setting_effekttariff_highload_weekday_thursday:
    name: "If high-load period shall be measured for: Thursday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for weekday: Friday.
  setting_effekttariff_highload_weekday_friday:
    name: "If high-load period shall be measured for: Friday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for weekday: Saturday.
  setting_effekttariff_highload_weekday_saturday:
    name: "If high-load period shall be measured for: Saturday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for weekday: Sunday.
  setting_effekttariff_highload_weekday_sunday:
    name: "If high-load period shall be measured for: Sunday"
    icon: mdi:calendar-range
  # Setting for effekttariff: If high-load period shall be measured for specific hours.
  setting_effekttariff_highload_hours_enabled:
    name: "If high-load period shall be measured for specific hours"
    icon: mdi:priority-high

input_number:
  # Setting for effekttariff: From month that the maximum absorbed power by the house shall be measured.
  setting_effekttariff_highload_from_month:
    name: "From month that high-load period shall be measured (autum/winter-month)"
    mode: box
    min: 1
    max: 12
    icon: mdi:counter
  # Setting for effekttariff: To month that the maximum absorbed power by the house shall be measured.
  setting_effekttariff_highload_to_month:
    name: "To month that high-load period shall be measured (spring-month)"
    mode: box
    min: 1
    max: 12
    icon: mdi:counter
  # Setting for effekttariff: From hour that the maximum absorbed power by the house shall be measured.
  setting_effekttariff_highload_from_hour:
    name: "From hour that the maximum absorbed power-load by the house shall be measured"
    mode: box
    min: 1
    max: 23
    icon: mdi:counter
  # Setting for effekttariff: From hour that the maximum absorbed power by the house shall be measured.
  setting_effekttariff_highload_to_hour:
    name: "To hour that the maximum absorbed power-load by the house shall be measured"
    mode: box
    min: 1
    max: 23
    icon: mdi:counter
  # We want to keep the maxium power each hour over the day from metering_power_absorbed_max_day.
  sma_metering_power_absorbed_max_hour_max:
    name: "Maximum power each hour over the day from metering_power_absorbed_max_day"
    mode: box
    min: 0
    max: 100000
    unit_of_measurement: "W"
    icon: mdi:format-vertical-align-top
  # We want to keep the maximum hourly-load, during high-load hours.
  sma_metering_power_absorbed_max_hour_max_high_load_period:
    name: "Maximum power each hour over the day from metering_power_absorbed_max_day, during high-load hours"
    mode: box
    min: 0
    max: 100000
    unit_of_measurement: "W"
    icon: mdi:format-vertical-align-top
  # We want to keep the maximum hourly-load, during low-load hours.
  sma_metering_power_absorbed_max_hour_max_low_load_period:
    name: "Maximum power each hour over the day from metering_power_absorbed_max_day, during low-load hours"
    mode: box
    min: 0
    max: 100000
    unit_of_measurement: "W"
    icon: mdi:format-vertical-align-top
  # We set the load-period based on inputs.
  sma_effekttariff_current_load_period:
    name: "The load-period based on parameters and month, weekday or time."
    mode: box
    min: 0
    max: 2
    icon: mdi:priority-high
  setting_effekttariff_lowload_factor:
    name: "The recalculation factor for maximum power for low-load and hour."
    mode: box
    min: 0
    max: 1
    step: 0.1
    icon: mdi:calculator
  setting_effekttariff_number_days_for_average:
    name: "The number of highest day-loads to average at the end of the month.."
    mode: box
    min: 2
    max: 5
    icon: mdi:timeline-clock

input_text:
  # We want to keep an array of the maximum 5 daily loads during the month.
  sma_metering_power_absorbed_max_month_array:
    name: "Array of 5 daily maximum load days during the month"
    icon: mdi:application-array-outline
  # We want to keep an array of the maximum 5 daily high-loads during the month.
  sma_metering_power_absorbed_max_month_high_load_period_array:
    name: "Array of 5 daily maximum high-load days during the month"
    icon: mdi:application-array-outline
  # We want to keep an array of the maximum 5 daily low-loads during the month.
  sma_metering_power_absorbed_max_month_low_load_period_array:
    name: "Array of 5 daily maximum low-load days during the month"
    icon: mdi:application-array-outline
  # We want to keep an array of the maximum 5 daily low-loads, with factor, during the month.
  sma_metering_power_absorbed_max_month_low_load_factor_period_array:
    name: "Array of 5 daily maximum low-load, with factor parameter, days during the month"
    icon: mdi:application-array-outline
  # We want to keep an array of the maximum 5 daily loads for either high-load or low-load with factor parameter, during the month.
  sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array:
    name: "Array of 5 daily maximum loads for either high-load or low-load with factor parameter during the month"
    icon: mdi:application-array-outline

sensor:
  # We want to get the min statistics for the current (A) on line 1.
  - platform: statistics
    name: SMA metering current l1 min
    unique_id: sma_metering_current_l1_min
    entity_id: sensor.metering_current_l1
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for the current (A) on line 1.
  - platform: statistics
    name: SMA metering current l1 mean
    unique_id: sma_metering_current_l1_mean
    entity_id: sensor.metering_current_l1
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for the current (A) on line 1.
  - platform: statistics
    name: SMA metering current l1 max
    unique_id: sma_metering_current_l1_max
    entity_id: sensor.metering_current_l1
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for the current (A) on line 2.
  - platform: statistics
    name: SMA metering current l2 min
    unique_id: sma_metering_current_l2_min
    entity_id: sensor.metering_current_l2
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for the current (A) on line 2.
  - platform: statistics
    name: SMA metering current l2 mean
    unique_id: sma_metering_current_l2_mean
    entity_id: sensor.metering_current_l2
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for the current (A) on line 2.
  - platform: statistics
    name: SMA metering current l2 max
    unique_id: sma_metering_current_l2_max
    entity_id: sensor.metering_current_l2
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for the current (A) on line 3.
  - platform: statistics
    name: SMA metering current l3 min
    unique_id: sma_metering_current_l3_min
    entity_id: sensor.metering_current_l3
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for the current (A) on line 3.
  - platform: statistics
    name: SMA metering current l3 mean
    unique_id: sma_metering_current_l3_mean
    entity_id: sensor.metering_current_l3
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for the current (A) on line 3.
  - platform: statistics
    name: SMA metering current l3 max
    unique_id: sma_metering_current_l3_max
    entity_id: sensor.metering_current_l3
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_power_absorbed.
  - platform: statistics
    name: SMA metering power absorbed min
    unique_id: sma_metering_power_absorbed_min
    entity_id: sensor.metering_power_absorbed
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_power_absorbed.
  - platform: statistics
    name: SMA metering power absorbed mean
    unique_id: sma_metering_power_absorbed_mean
    entity_id: sensor.metering_power_absorbed
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_power_absorbed.
  - platform: statistics
    name: SMA metering power absorbed max
    unique_id: sma_metering_power_absorbed_max
    entity_id: sensor.metering_power_absorbed
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_draw_l1.
  - platform: statistics
    name: SMA metering active power draw l1 min
    unique_id: sma_metering_active_power_draw_l1_min
    entity_id: sensor.metering_active_power_draw_l1
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_draw_l1.
  - platform: statistics
    name: SMA metering active power draw l1 mean
    unique_id: sma_metering_active_power_draw_l1_mean
    entity_id: sensor.metering_active_power_draw_l1
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_draw_l1.
  - platform: statistics
    name: SMA metering active power draw l1 max
    unique_id: sma_metering_active_power_draw_l1_max
    entity_id: sensor.metering_active_power_draw_l1
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_draw_l2.
  - platform: statistics
    name: SMA metering active power draw l2 min
    unique_id: sma_metering_active_power_draw_l2_min
    entity_id: sensor.metering_active_power_draw_l2
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_draw_l2.
  - platform: statistics
    name: SMA metering active power draw l2 mean
    unique_id: sma_metering_active_power_draw_l2_mean
    entity_id: sensor.metering_active_power_draw_l2
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_draw_l2.
  - platform: statistics
    name: SMA metering active power draw l2 max
    unique_id: sma_metering_active_power_draw_l2_max
    entity_id: sensor.metering_active_power_draw_l2
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_draw_l3.
  - platform: statistics
    name: SMA metering active power draw l3 min
    unique_id: sma_metering_active_power_draw_l3_min
    entity_id: sensor.metering_active_power_draw_l3
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_draw_l3.
  - platform: statistics
    name: SMA metering active power draw l3 mean
    unique_id: sma_metering_active_power_draw_l3_mean
    entity_id: sensor.metering_active_power_draw_l3
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_draw_l3.
  - platform: statistics
    name: SMA metering active power draw l3 max
    unique_id: sma_metering_active_power_draw_l3_max
    entity_id: sensor.metering_active_power_draw_l3
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_frequency.
  - platform: statistics
    name: SMA metering frequency min
    unique_id: sma_metering_frequency_min
    entity_id: sensor.metering_frequency
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_frequency.
  - platform: statistics
    name: SMA metering frequency mean
    unique_id: sma_metering_frequency_mean
    entity_id: sensor.metering_frequency
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_frequency.
  - platform: statistics
    name: SMA metering frequency max
    unique_id: sma_metering_frequency_max
    entity_id: sensor.metering_frequency
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for grid_power.
  - platform: statistics
    name: SMA grid power min
    unique_id: sma_grid_power_min
    entity_id: sensor.grid_power
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for grid_power.
  - platform: statistics
    name: SMA grid power mean
    unique_id: sma_grid_power_mean
    entity_id: sensor.grid_power
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for grid_power.
  - platform: statistics
    name: SMA grid power max
    unique_id: sma_grid_power_max
    entity_id: sensor.grid_power
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for metering_power_supplied.
  - platform: statistics
    name: SMA metering power supplied min
    unique_id: sma_metering_power_supplied_min
    entity_id: sensor.metering_power_supplied
    state_characteristic: value_min
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_power_supplied.
  - platform: statistics
    name: SMA metering power supplied mean
    unique_id: sma_metering_power_supplied_mean
    entity_id: sensor.metering_power_supplied
    state_characteristic: mean
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the max statistics for metering_power_supplied.
  - platform: statistics
    name: SMA metering power supplied max
    unique_id: sma_metering_power_supplied_max
    entity_id: sensor.metering_power_supplied
    state_characteristic: value_max
    sampling_size: 720
    max_age:
      hours: 1
  # We want to get the min statistics for pv_current_a
  - platform: statistics
    name: SMA pv current a min
    unique_id: sma_pv_current_a_min
    entity_id: sensor.pv_current_a
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_current_a
  - platform: statistics
    name: SMA pv current a mean
    unique_id: sma_pv_current_a_mean
    entity_id: sensor.pv_current_a
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_current_a
  - platform: statistics
    name: SMA pv current a max
    unique_id: sma_pv_current_a_max
    entity_id: sensor.pv_current_a
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the min statistics for pv_current_b
  - platform: statistics
    name: SMA pv current b min
    unique_id: sma_pv_current_b_min
    entity_id: sensor.pv_current_b
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_current_b
  - platform: statistics
    name: SMA pv current b mean
    unique_id: sma_pv_current_b_mean
    entity_id: sensor.pv_current_b
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_current_b
  - platform: statistics
    name: SMA pv current b max
    unique_id: sma_pv_current_b_max
    entity_id: sensor.pv_current_b
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the min statistics for pv_power_a
  - platform: statistics
    name: SMA pv power a min
    unique_id: sma_pv_power_a_min
    entity_id: sensor.pv_power_a
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_power_a
  - platform: statistics
    name: SMA pv power a mean
    unique_id: sma_pv_power_a_mean
    entity_id: sensor.pv_power_a
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_power_a
  - platform: statistics
    name: SMA pv power a max
    unique_id: sma_pv_power_a_max
    entity_id: sensor.pv_power_a
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the min statistics for pv_power_b
  - platform: statistics
    name: SMA pv power b min
    unique_id: sma_pv_power_b_min
    entity_id: sensor.pv_power_b
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the mean statistics for pv_power_b
  - platform: statistics
    name: SMA pv power b mean
    unique_id: sma_pv_power_b_mean
    entity_id: sensor.pv_power_b
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the max statistics for pv_power_b
  - platform: statistics
    name: SMA pv power b max
    unique_id: sma_pv_power_b_max
    entity_id: sensor.pv_power_b
    state_characteristic: value_max
    max_age:
      hours: 1
  # Keep track of how long solar power is produced each hour.
  - platform: history_stats
    name: SMA solar power produced time hour
    entity_id: binary_sensor.sma_solar_power_producing
    state: "on"
    type: time
    start: "{{ now().replace(minute=0, second=0) }}"
    end: "{{ now() }}"
  # We want to get the min statistics for metering_active_power_feed_l1
  - platform: statistics
    name: SMA metering active power feed l1 min
    unique_id: sma_metering_active_power_feed_l1_min
    entity_id: sensor.metering_active_power_feed_l1
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_feed_l1
  - platform: statistics
    name: SMA metering active power feed l1 max
    unique_id: sma_metering_active_power_feed_l1_max
    entity_id: sensor.metering_active_power_feed_l1
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_feed_l1
  - platform: statistics
    name: SMA metering active power feed l1 mean
    unique_id: sma_metering_active_power_feed_l1_mean
    entity_id: sensor.metering_active_power_feed_l1
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l2 min
    unique_id: sma_metering_active_power_feed_l2_min
    entity_id: sensor.metering_active_power_feed_l2
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l2 max
    unique_id: sma_metering_active_power_feed_l2_max
    entity_id: sensor.metering_active_power_feed_l2
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l2 mean
    unique_id: sma_metering_active_power_feed_l2_mean
    entity_id: sensor.metering_active_power_feed_l2
    state_characteristic: mean
    max_age:
      hours: 1
  # We want to get the min statistics for metering_active_power_feed_l3
  - platform: statistics
    name: SMA metering active power feed l3 min
    unique_id: sma_metering_active_power_feed_l3_min
    entity_id: sensor.metering_active_power_feed_l3
    state_characteristic: value_min
    max_age:
      hours: 1
  # We want to get the max statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l3 max
    unique_id: sma_metering_active_power_feed_l3_max
    entity_id: sensor.metering_active_power_feed_l3
    state_characteristic: value_max
    max_age:
      hours: 1
  # We want to get the mean statistics for metering_active_power_feed_l2
  - platform: statistics
    name: SMA metering active power feed l3 mean
    unique_id: sma_metering_active_power_feed_l3_mean
    entity_id: sensor.metering_active_power_feed_l3
    state_characteristic: mean
    max_age:
      hours: 1

template:
  - binary_sensor:
      # We want to know when solar power is produced.
      - name: SMA solar power producing
        unique_id: sma_solar_power_producing
        state: >
          {% set solar_power = states('sensor.grid_power') %}
          {% set result = false %}
          {% set inputs_valid = false %}
          {% if (solar_power != 'unknown' and solar_power != 'unavailable') %}
          {%   set solar_power = float(solar_power, default=0) %}
          {%   set inputs_valid = true %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   if (solar_power > 0) %}
          {%     set result = true %}
          {%   endif %}
          {% endif %}
          {{ result }}
  - sensor:
      # Convert the current load to readable string.
      - name: SMA effekttariff current load period string
        unique_id: sma_effekttariff_current_load_period_string
        icon: mdi:priority-high
        state: >
          {% set current_load = states('input_number.sma_effekttariff_current_load_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_load == 'unknown' or current_load == 'unavailable' or current_load == 'none' or current_load == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_load = current_load | int %}
          {%   if (current_load == 1) %}
          {%     set result = "LÃ¥g-period" %}
          {%   elif (current_load == 2) %}
          {%     set result = "HÃ¶g-period" %}
          {%   endif %}
          {% endif %}
          {{ result }}

  - trigger:
      # Trigger at the end of every hour, since we want the sensor value to be set for the hour.
      # 20230102: Changed from 59.58 to 59.56 to further add space before 59.58 each hour.
      - platform: time_pattern
        hours: "/1"
        minutes: "59"
        seconds: "56"
    sensor:
      # We save sma_metering_current_l1_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l1_min_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l1_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l1_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l1_mean_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l1_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l1_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l1_max_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l1_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l2_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l2_min_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l2_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l2_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l2_mean_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l2_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l2_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l2_max_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l2_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l3_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l3_min_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l3_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l3_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l3_mean_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l3_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_current_l3_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_current_l3_max_hour
        device_class: "current"
        unit_of_measurement: "A"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_current_l3_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_absorbed_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_absorbed_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_absorbed_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_absorbed_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_absorbed_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_absorbed_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_absorbed_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_absorbed_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_absorbed_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l1_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l1_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l1_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l1_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l1_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l1_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l1_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l1_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l1_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l2_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l2_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l2_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l2_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l2_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l2_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l2_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l2_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l2_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l3_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l3_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l3_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l3_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l3_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l3_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_draw_l3_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_draw_l3_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_draw_l3_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_frequency_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_frequency_min_hour
        device_class: "frequency"
        unit_of_measurement: "Hz"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_frequency_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_frequency_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_frequency_mean_hour
        device_class: "frequency"
        unit_of_measurement: "Hz"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_frequency_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_frequency_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_frequency_max_hour
        device_class: "frequency"
        unit_of_measurement: "Hz"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_frequency_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_grid_power_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_grid_power_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_grid_power_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_grid_power_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_grid_power_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_grid_power_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_grid_power_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_grid_power_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_grid_power_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_supplied_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_supplied_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_supplied_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_supplied_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_supplied_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_supplied_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_power_supplied_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_power_supplied_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_power_supplied_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_a_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_a_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_a_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_a_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_a_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_a_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_a_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_a_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_a_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_b_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_b_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_b_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_b_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_b_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_b_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_current_b_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_current_b_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_current_b_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_a_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_a_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_a_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_a_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_a_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_a_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_a_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_a_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_a_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_b_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_b_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_b_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_b_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_b_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_b_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_pv_power_b_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_pv_power_b_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_pv_power_b_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save metering_total_absorbed each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_metering_total_absorbed_hour
        device_class: "energy"
        unit_of_measurement: "kWh"
        state_class: total_increasing
        state: >
          {% set input = states('sensor.metering_total_absorbed') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save metering_total_absorbed_cost each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_metering_total_absorbed_cost_hour
        device_class: "monetary"
        unit_of_measurement: "SEK"
        state_class: total
        state: >
          {% set input = states('sensor.metering_total_absorbed_cost') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_solar_power_produced_time_hour each hour.
      - name: sma_solar_power_produced_time_hour_last
        unit_of_measurement: "time"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_solar_power_produced_time_hour') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save pv_gen_meter each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_pv_gen_meter_hour
        device_class: "energy"
        unit_of_measurement: "kWh"
        state_class: total_increasing
        state: >
          {% set input = states('sensor.pv_gen_meter') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save total_yield each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_total_yield_hour
        device_class: "energy"
        unit_of_measurement: "kWh"
        state_class: total_increasing
        state: >
          {% set input = states('sensor.total_yield') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save metering_total_yield each hour.
      # This is an increasing value, so we will capture it in next hour.
      # Not important to capture at the very end of the hour.
      - name: sma_metering_total_yield_hour
        device_class: "energy"
        unit_of_measurement: "kWh"
        state_class: total_increasing
        state: >
          {% set input = states('sensor.metering_total_yield') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save daily_yield each hour.
      - name: sma_daily_yield_hour
        unit_of_measurement: "Wh"
        state_class: measurement
        state: >
          {% set input = states('sensor.daily_yield') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}

      # We save sma_metering_active_power_feed_l1_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l1_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l1_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l1_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l1_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l1_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l1_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l1_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l1_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l2_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l2_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l2_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l2_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l2_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l2_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l2_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l2_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l2_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l3_min
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l3_min_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l3_min') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l3_max
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l3_max_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l3_max') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}
      # We save sma_metering_active_power_feed_l3_mean
      # We will therefore not capture the last seconds for the hour, but that will have minor impact as we gather data for 60 minutes.
      - name: sma_metering_active_power_feed_l3_mean_hour
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        state: >
          {% set input = states('sensor.sma_metering_active_power_feed_l3_mean') %}
          {% if (input == 'unknown' or input == 'unavailable') %}
          {%   set value = 0 %}
          {% else %}
          {%   set value = float(input, default=0) %}
          {% endif %}
          {{ value }}

  - trigger:
      # Trigger at end of day to get last maximum power.
      # Triggered 23.59.57, after sensors has been set 59.56.
      - platform: time_pattern
        hours: "23"
        minutes: "59"
        seconds: "57"
    sensor:
      # Get the last maximum power for the day.
      - name: sma_metering_power_absorbed_max_day
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set input = states('input_number.sma_metering_power_absorbed_max_hour_max') %}
          {% if (input == 'unknown' or input == 'unavailable' or input == 'none' or input == None) %}
          {%   set value = none %}
          {% else %}
          {%   set value = input | int %}
          {% endif %}
          {{ value }}
      # Get the last maximum power for the day, for high-load period.
      - name: sma_metering_power_absorbed_max_day_high_load_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set input = states('input_number.sma_metering_power_absorbed_max_hour_max_high_load_period') %}
          {% if (input == 'unknown' or input == 'unavailable' or input == 'none' or input == None) %}
          {%   set value = none %}
          {% else %}
          {%   set value = input | int %}
          {% endif %}
          {{ value }}
      # Get the last maximum power for the day, for low-load period.
      - name: sma_metering_power_absorbed_max_day_low_load_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set input = states('input_number.sma_metering_power_absorbed_max_hour_max_low_load_period') %}
          {% if (input == 'unknown' or input == 'unavailable' or input == 'none' or input == None) %}
          {%   set value = none %}
          {% else %}
          {%   set value = input | int %}
          {% endif %}
          {{ value }}
      # Get the last maximum power for the day, for low-load period with factor.
      - name: sma_metering_power_absorbed_max_day_low_load_factor_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set input = states('input_number.sma_metering_power_absorbed_max_hour_max_low_load_period') %}
          {% set factor = states('input_number.setting_effekttariff_lowload_factor') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (input == 'unknown' or input == 'unavailable' or input == 'none' or input == None) %}
          {%   set inputs_valid = false %}
          {% elif (factor == 'unknown' or factor == 'unavailable' or factor == 'none' or factor == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set input = input | int %}
          {%   set factor = factor | float %}
          {%   set result = (input * factor) | int %}
          {% endif %}
          {{ result }}
      # Get the last maximum hourly-load for the day, for either high-load or low-load hours with reduction parameter.
      - name: sma_metering_power_absorbed_max_day_high_and_low_load_factor_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set input_high = states('input_number.sma_metering_power_absorbed_max_hour_max_high_load_period') %}
          {% set input_low = states('input_number.sma_metering_power_absorbed_max_hour_max_low_load_period') %}
          {% set factor = states('input_number.setting_effekttariff_lowload_factor') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (input_high == 'unknown' or input_high == 'unavailable' or input_high == 'none' or input_high == None) %}
          {%   set inputs_valid = false %}
          {% elif (input_low == 'unknown' or input_low == 'unavailable' or input_low == 'none' or input_low == None) %}
          {%   set inputs_valid = false %}
          {% elif (factor == 'unknown' or factor == 'unavailable' or factor == 'none' or factor == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set input_high = input_high | int %}
          {%   set input_low = input_low | int %}
          {%   set factor = factor | float %}
          {%   set input_low = (input_low * factor) | int %}
          {%   if (input_high > input_low) %}
          {%     set result = input_high %}
          {%   else %}
          {%     set result = input_low %}
          {%   endif %}
          {% endif %}
          {{ result }}

  - trigger:
      # Trigger at end of last day of the month.
      # Triggered 23.59.59, after all other sensors has been set.
      - platform: time_pattern
        hours: "23"
        minutes: "59"
        seconds: "59"
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ (now() + timedelta(hours=1)).day == 1 }}"
    sensor:
      # Get the maximum dayly-load for the month.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_array
      - name: sma_metering_power_absorbed_max_month
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_array') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_array = current_array | from_json %}
          {%   set result = current_array[0] %}
          {% endif %}
          {{ result }}
      # Get the average dayly-load for the month.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_array
      #  Utilize the input sensor 'setting_effekttariff_number_days_for_average' for number of days with maximum load to average.
      - name: sma_metering_power_absorbed_average_month
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_array') %}
          {% set current_days = states('input_number.setting_effekttariff_number_days_for_average') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% elif (current_days == 'unknown' or current_days == 'unavailable' or current_days == 'none' or current_days == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_days = current_days | int %}
          {%   set current_array = current_array | from_json %}
          {%   set ns = namespace(sum = 0) %}
          {%   for i in range(0, current_days) %}
          {%     set add = current_array[i] | int %}
          {%     set ns.sum = ns.sum + add %}
          {%   endfor %}
          {%   set result = (ns.sum / current_days) | int %}
          {% endif %}
          {{ result }}
      # Get the maximum high-load for the month.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_high_load_period_array
      - name: sma_metering_power_absorbed_max_month_high_load_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_high_load_period_array') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_array = current_array | from_json %}
          {%   set result = current_array[0] %}
          {% endif %}
          {{ result }}
      # Get the average high-load for the month.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_high_load_period_array
      #  Utilize the input sensor 'setting_effekttariff_number_days_for_average' for number of days with maximum load to average.
      - name: sma_metering_power_absorbed_average_month_high_load_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_high_load_period_array') %}
          {% set current_days = states('input_number.setting_effekttariff_number_days_for_average') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% elif (current_days == 'unknown' or current_days == 'unavailable' or current_days == 'none' or current_days == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_days = current_days | int %}
          {%   set current_array = current_array | from_json %}
          {%   set ns = namespace(sum = 0) %}
          {%   for i in range(0, current_days) %}
          {%     set add = current_array[i] | int %}
          {%     set ns.sum = ns.sum + add %}
          {%   endfor %}
          {%   set result = (ns.sum / current_days) | int %}
          {% endif %}
          {{ result }}
      # Get the maximum low-load for the month.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_low_load_period_array
      - name: sma_metering_power_absorbed_max_month_low_load_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_low_load_period_array') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_array = current_array | from_json %}
          {%   set result = current_array[0] %}
          {% endif %}
          {{ result }}
      # Get the average low-load for the month.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_low_load_period_array
      #  Utilize the input sensor 'setting_effekttariff_number_days_for_average' for number of days with maximum load to average.
      - name: sma_metering_power_absorbed_average_month_low_load_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_low_load_period_array') %}
          {% set current_days = states('input_number.setting_effekttariff_number_days_for_average') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% elif (current_days == 'unknown' or current_days == 'unavailable' or current_days == 'none' or current_days == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_days = current_days | int %}
          {%   set current_array = current_array | from_json %}
          {%   set ns = namespace(sum = 0) %}
          {%   for i in range(0, current_days) %}
          {%     set add = current_array[i] | int %}
          {%     set ns.sum = ns.sum + add %}
          {%   endfor %}
          {%   set result = (ns.sum / current_days) | int %}
          {% endif %}
          {{ result }}
      # Get the maximum low-load day for the month with factor parameter.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_low_load_factor_period_array
      - name: sma_metering_power_absorbed_max_month_low_load_factor_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_array = current_array | from_json %}
          {%   set result = current_array[0] %}
          {% endif %}
          {{ result }}
      # Get the average low-load day for the month with factor parameter.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_low_load_factor_period_array
      #  Utilize the input sensor 'setting_effekttariff_number_days_for_average' for number of days with maximum load to average.
      - name: sma_metering_power_absorbed_average_month_low_load_factor_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array') %}
          {% set current_days = states('input_number.setting_effekttariff_number_days_for_average') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% elif (current_days == 'unknown' or current_days == 'unavailable' or current_days == 'none' or current_days == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_days = current_days | int %}
          {%   set current_array = current_array | from_json %}
          {%   set ns = namespace(sum = 0) %}
          {%   for i in range(0, current_days) %}
          {%     set add = current_array[i] | int %}
          {%     set ns.sum = ns.sum + add %}
          {%   endfor %}
          {%   set result = (ns.sum / current_days) | int %}
          {% endif %}
          {{ result }}
      # Get the maximum hourly-load for the month, for either high-load or low-load hours with factor parameter.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array
      - name: sma_metering_power_absorbed_max_month_high_and_low_load_factor_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_array = current_array | from_json %}
          {%   set result = current_array[0] %}
          {% endif %}
          {{ result }}
      # Get the average hourly-load for the month, for either high-load or low-load hours with factor parameter.
      #  Retrieve from the sensor with array: sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array
      #  Utilize the input sensor 'setting_effekttariff_number_days_for_average' for number of days with maximum load to average.
      - name: sma_metering_power_absorbed_average_month_high_and_low_load_factor_period
        device_class: "power"
        unit_of_measurement: "W"
        state_class: measurement
        icon: mdi:format-vertical-align-top
        state: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array') %}
          {% set current_days = states('input_number.setting_effekttariff_number_days_for_average') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set inputs_valid = false %}
          {% elif (current_days == 'unknown' or current_days == 'unavailable' or current_days == 'none' or current_days == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_days = current_days | int %}
          {%   set current_array = current_array | from_json %}
          {%   set ns = namespace(sum = 0) %}
          {%   for i in range(0, current_days) %}
          {%     set add = current_array[i] | int %}
          {%     set ns.sum = ns.sum + add %}
          {%   endfor %}
          {%   set result = (ns.sum / current_days) | int %}
          {% endif %}
          {{ result }}

automation:
  # Automation for updating input sensor 'sma_metering_power_absorbed_max_hour_max' when 'sma_metering_power_absorbed_max_hour' updates.
  # To get the maximum value for the day.
  - id: automation_sma_metering_power_absorbed_max_hour_max
    alias: "Automation for updating input_number.sma_metering_power_absorbed_max_hour_max"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_hour
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_metering_power_absorbed_max_hour_max
        value: >
          {% set current_max_hour = states('sensor.sma_metering_power_absorbed_max_hour') %}
          {% set current_max_day = states('input_number.sma_metering_power_absorbed_max_hour_max') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_max_hour == 'unknown' or current_max_hour == 'unavailable' or current_max_hour == 'none' or current_max_hour == None) %}
          {%   if (current_max_day == 'unknown' or current_max_day == 'unavailable' or current_max_day == 'none' or current_max_day == None) %}
          {%     set inputs_valid = false %}
          {%   else %}
          {%     set current_max_hour = current_max_day | int %}
          {%   endif %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_max_hour = current_max_hour | int %}
          {%   set current_max_day = current_max_day | int %}
          {%   if (current_max_hour > current_max_day) %}
          {%     set result = current_max_hour %}
          {%   else %}
          {%     set result = current_max_day %}
          {%   endif %}
          {% endif %}
          {{ result }}

  # Automation for updating input sensor 'sma_metering_power_absorbed_max_hour_max_high_load_period'.
  #   When 'sma_metering_power_absorbed_max_hour' updates.
  #     And when input sensor 'sma_effekttariff_current_load_period' is set to 2.
  - id: automation_sma_metering_power_absorbed_max_hour_max_high_load_period
    alias: "Automation for updating input_number.sma_metering_power_absorbed_max_hour_max_high_load_period"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_hour
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_metering_power_absorbed_max_hour_max_high_load_period
        value: >
          {% set highlow_load_period = states('input_number.sma_effekttariff_current_load_period') %}
          {% set current_max_hour = states('sensor.sma_metering_power_absorbed_max_hour') %}
          {% set current_max_day = states('input_number.sma_metering_power_absorbed_max_hour_max_high_load_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (highlow_load_period == 'unknown' or highlow_load_period == 'unavailable' or highlow_load_period == 'none' or highlow_load_period == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (current_max_hour == 'unknown' or current_max_hour == 'unavailable' or current_max_hour == 'none' or current_max_hour == None) %}
          {%   if (current_max_day == 'unknown' or current_max_day == 'unavailable' or current_max_day == 'none' or current_max_day == None) %}
          {%     set inputs_valid = false %}
          {%   else %}
          {%     set current_max_hour = current_max_day | int %}
          {%   endif %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set highlow_load_period = highlow_load_period | int %}
          {%   set current_max_hour = current_max_hour | int %}
          {%   set current_max_day = current_max_day | int %}
          {%   set result = current_max_day %}
          {%   if (highlow_load_period == 2) %}
          {%     if (current_max_hour > current_max_day) %}
          {%       set result = current_max_hour %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}

  # Automation for updating input sensor 'sma_metering_power_absorbed_max_hour_max_low_load_period'.
  #   When 'sma_metering_power_absorbed_max_hour' updates.
  #     And when input sensor 'sma_effekttariff_current_load_period' is set to 1.
  - id: automation_sma_metering_power_absorbed_max_hour_max_low_load_period
    alias: "Automation for updating input_number.sma_metering_power_absorbed_max_hour_max_low_load_period"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_hour
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_metering_power_absorbed_max_hour_max_low_load_period
        value: >
          {% set highlow_load_period = states('input_number.sma_effekttariff_current_load_period') %}
          {% set current_max_hour = states('sensor.sma_metering_power_absorbed_max_hour') %}
          {% set current_max_day = states('input_number.sma_metering_power_absorbed_max_hour_max_low_load_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (highlow_load_period == 'unknown' or highlow_load_period == 'unavailable' or highlow_load_period == 'none' or highlow_load_period == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (current_max_hour == 'unknown' or current_max_hour == 'unavailable' or current_max_hour == 'none' or current_max_hour == None) %}
          {%   if (current_max_day == 'unknown' or current_max_day == 'unavailable' or current_max_day == 'none' or current_max_day == None) %}
          {%     set inputs_valid = false %}
          {%   else %}
          {%     set current_max_hour = current_max_day | int %}
          {%   endif %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set highlow_load_period = highlow_load_period | int %}
          {%   set current_max_hour = current_max_hour | int %}
          {%   set current_max_day = current_max_day | int %}
          {%   set result = current_max_day %}
          {%   if (highlow_load_period == 1) %}
          {%     if (current_max_hour > current_max_day) %}
          {%       set result = current_max_hour %}
          {%     endif %}
          {%   endif %}
          {% endif %}
          {{ result }}
  #
  # --------------------------------------------------------------------------------------------------------------
  #
  # Automation for updating input sensor 'sma_metering_power_absorbed_max_month_array'.
  #   When 'sma_metering_power_absorbed_max_day' updates.
  - id: automation_sma_metering_power_absorbed_max_month_array
    alias: "Automation for updating input_text.sma_metering_power_absorbed_max_month_array"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_day
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_array
        value: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_array') %}
          {% set current_max = states('sensor.sma_metering_power_absorbed_max_day') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set current_array = "[0, 0, 0, 0, 0]" %}
          {% endif %}
          {% if (current_max == 'unknown' or current_max == 'unavailable' or current_max == 'none' or current_max == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_max = current_max | int %}
          {%   set current_array = current_array | from_json %}
          {%   set current_array = current_array + [current_max] %}
          {%   set result = current_array | sort(reverse = True) %}
          {%   set result = result[0:5] %}
          {% endif %}
          {{ result }}
  # Automation for updating input sensor 'sma_metering_power_absorbed_max_month_high_load_period_array'.
  #   When 'sma_metering_power_absorbed_max_day_high_load_period' updates.
  - id: automation_sma_metering_power_absorbed_max_month_high_load_period_array
    alias: "Automation for updating input_text.sma_metering_power_absorbed_max_month_high_load_period_array"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_day_high_load_period
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_high_load_period_array
        value: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_high_load_period_array') %}
          {% set current_max = states('sensor.sma_metering_power_absorbed_max_day_high_load_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set current_array = "[0, 0, 0, 0, 0]" %}
          {% endif %}
          {% if (current_max == 'unknown' or current_max == 'unavailable' or current_max == 'none' or current_max == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_max = current_max | int %}
          {%   set current_array = current_array | from_json %}
          {%   set current_array = current_array + [current_max] %}
          {%   set result = current_array | sort(reverse = True) %}
          {%   set result = result[0:5] %}
          {% endif %}
          {{ result }}
  # Automation for updating input sensor 'sma_metering_power_absorbed_max_month_low_load_period_array'.
  #   When 'sma_metering_power_absorbed_max_day_low_load_period' updates.
  - id: automation_sma_metering_power_absorbed_max_month_low_load_period_array
    alias: "Automation for updating input_text.sma_metering_power_absorbed_max_month_low_load_period_array"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_day_low_load_period
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_low_load_period_array
        value: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_low_load_period_array') %}
          {% set current_max = states('sensor.sma_metering_power_absorbed_max_day_low_load_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set current_array = "[0, 0, 0, 0, 0]" %}
          {% endif %}
          {% if (current_max == 'unknown' or current_max == 'unavailable' or current_max == 'none' or current_max == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_max = current_max | int %}
          {%   set current_array = current_array | from_json %}
          {%   set current_array = current_array + [current_max] %}
          {%   set result = current_array | sort(reverse = True) %}
          {%   set result = result[0:5] %}
          {% endif %}
          {{ result }}
  # Automation for updating input sensor 'sma_metering_power_absorbed_max_month_low_load_factor_period_array'.
  #   When 'sma_metering_power_absorbed_max_day_low_load_factor_period' updates.
  - id: automation_sma_metering_power_absorbed_max_month_low_load_factor_period_array
    alias: "Automation for updating input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_day_low_load_factor_period
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array
        value: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array') %}
          {% set current_max = states('sensor.sma_metering_power_absorbed_max_day_low_load_factor_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set current_array = "[0, 0, 0, 0, 0]" %}
          {% endif %}
          {% if (current_max == 'unknown' or current_max == 'unavailable' or current_max == 'none' or current_max == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_max = current_max | int %}
          {%   set current_array = current_array | from_json %}
          {%   set current_array = current_array + [current_max] %}
          {%   set result = current_array | sort(reverse = True) %}
          {%   set result = result[0:5] %}
          {% endif %}
          {{ result }}
  # Automation for updating input sensor 'sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array'.
  #   When 'sma_metering_power_absorbed_max_day_high_and_low_load_factor_period' updates.
  - id: automationsma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array
    alias: "Automation for updating input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array"
    trigger:
      - platform: state
        entity_id: sensor.sma_metering_power_absorbed_max_day_high_and_low_load_factor_period
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array
        value: >
          {% set current_array = states('input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array') %}
          {% set current_max = states('sensor.sma_metering_power_absorbed_max_day_high_and_low_load_factor_period') %}
          {% set result = none %}
          {% set inputs_valid = true %}
          {% if (current_array == 'unknown' or current_array == 'unavailable' or current_array == 'none' or current_array == None or current_array == "") %}
          {%   set current_array = "[0, 0, 0, 0, 0]" %}
          {% endif %}
          {% if (current_max == 'unknown' or current_max == 'unavailable' or current_max == 'none' or current_max == None) %}
          {%   set inputs_valid = false %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set current_max = current_max | int %}
          {%   set current_array = current_array | from_json %}
          {%   set current_array = current_array + [current_max] %}
          {%   set result = current_array | sort(reverse = True) %}
          {%   set result = result[0:5] %}
          {% endif %}
          {{ result }}
  #
  # --------------------------------------------------------------------------------------------------------------
  #
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_hour_max' at 00.00.02 each day.
  - id: automation_reset_sma_metering_power_absorbed_max_hour_max
    alias: "Automation for resetting input_number.sma_metering_power_absorbed_max_hour_max"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_metering_power_absorbed_max_hour_max
        value: >
          {%  set result = 0 %}
          {{ result }}
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_hour_max_high_load_period' at 00.00.02 each day.
  - id: automation_reset_sma_metering_power_absorbed_max_hour_max_high_load_period
    alias: "Automation for resetting input_number.sma_metering_power_absorbed_max_hour_max_high_load_period"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_metering_power_absorbed_max_hour_max_high_load_period
        value: >
          {%  set result = 0 %}
          {{ result }}
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_hour_max_low_load_period' at 00.00.02 each day.
  - id: automation_reset_sma_metering_power_absorbed_max_hour_max_low_load_period
    alias: "Automation for resetting input_number.sma_metering_power_absorbed_max_hour_max_low_load_period"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_metering_power_absorbed_max_hour_max_low_load_period
        value: >
          {%  set result = 0 %}
          {{ result }}
  #
  # --------------------------------------------------------------------------------------------------------------
  #
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_month_array' at 00.00.02 at start of month.
  - id: automation_reset_sma_metering_power_absorbed_max_month_array
    alias: "Automation for resetting input_text.sma_metering_power_absorbed_max_month_array"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ now().day == 1 }}"
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_array
        value: >
          {%  set result = "[0, 0, 0, 0, 0]" %}
          {{ result }}
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_month_high_load_period_array' at 00.00.02 at start of month.
  - id: automation_reset_sma_metering_power_absorbed_max_month_high_load_period_array
    alias: "Automation for resetting input_text.sma_metering_power_absorbed_max_month_high_load_period_array"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ now().day == 1 }}"
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_high_load_period_array
        value: >
          {%  set result = "[0, 0, 0, 0, 0]" %}
          {{ result }}
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_month_low_load_period_array' at 00.00.02 at start of month.
  - id: automation_reset_sma_metering_power_absorbed_max_month_low_load_period_array
    alias: "Automation for resetting input_text.sma_metering_power_absorbed_max_month_low_load_period_array"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ now().day == 1 }}"
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_low_load_period_array
        value: >
          {%  set result = "[0, 0, 0, 0, 0]" %}
          {{ result }}
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_month_low_load_factor_period_array' at 00.00.02 at start of month.
  - id: automation_reset_sma_metering_power_absorbed_max_month_low_load_factor_period_array
    alias: "Automation for resetting input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ now().day == 1 }}"
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_low_load_factor_period_array
        value: >
          {%  set result = "[0, 0, 0, 0, 0]" %}
          {{ result }}
  # Automation resetting input sensor 'sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array' at 00.00.02 at start of month.
  - id: automation_reset_sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array
    alias: "Automation for resetting input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array"
    trigger:
      - platform: time_pattern
        hours: "00"
        minutes: "00"
        seconds: "02"
    condition:
      - condition: and
        conditions:
          - condition: template
            value_template: "{{ now().day == 1 }}"
    action:
      service: input_text.set_value
      data_template:
        entity_id: input_text.sma_metering_power_absorbed_max_month_high_and_low_load_factor_period_array
        value: >
          {%  set result = "[0, 0, 0, 0, 0]" %}
          {{ result }}
  #
  # --------------------------------------------------------------------------------------------------------------
  #
  # Automation setting the load-period based on inputs at 00.02 of the hour.
  # This means that if the inputs are changed after 00.02, it will not be changed until next hour.
  # The logic is:
  # - If months are enabled: Month must be valid.
  # - If weekdays are enabled: Weekday must be valid.
  # - If hours are enabled: Hour must be valid.
  # The following is returned:
  # 0 - No high/low-load period (defaults to this value if errors occur).
  # 1 - Low-load period.
  # 2 - High-load period.
  - id: automation_set_sma_effekttariff_current_load_period
    alias: "Automation for setting input_number.sma_effekttariff_current_load_period"
    trigger:
      - platform: time_pattern
        hours: "/1"
        minutes: "00"
        seconds: "02"
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.sma_effekttariff_current_load_period
        value: >
          {% set current_month = now().month | int %}
          {% set current_weekday = now().weekday() | int %}
          {% set current_hour = now().hour | int %}
          {% set setting_month_enabled = states('input_boolean.setting_effekttariff_highload_month_enabled') %}
          {% set setting_from_month = states('input_number.setting_effekttariff_highload_from_month') %}
          {% set setting_to_month = states('input_number.setting_effekttariff_highload_to_month') %}
          {% set setting_weekdays_enabled = states('input_boolean.setting_effekttariff_highload_weekdays_enabled') %}
          {% set setting_weekday_monday = states('input_boolean.setting_effekttariff_highload_weekday_monday') %}
          {% set setting_weekday_tuesday = states('input_boolean.setting_effekttariff_highload_weekday_tuesday') %}
          {% set setting_weekday_wednesday = states('input_boolean.setting_effekttariff_highload_weekday_wednesday') %}
          {% set setting_weekday_thursday = states('input_boolean.setting_effekttariff_highload_weekday_thursday') %}
          {% set setting_weekday_friday = states('input_boolean.setting_effekttariff_highload_weekday_friday') %}
          {% set setting_weekday_saturday = states('input_boolean.setting_effekttariff_highload_weekday_saturday') %}
          {% set setting_weekday_sunday = states('input_boolean.setting_effekttariff_highload_weekday_sunday') %}
          {% set setting_hours_enabled = states('input_boolean.setting_effekttariff_highload_hours_enabled') %}
          {% set setting_from_hour = states('input_number.setting_effekttariff_highload_from_hour') %}
          {% set setting_to_hour = states('input_number.setting_effekttariff_highload_to_hour') %}
          {% set result = 0 %}
          {% set inputs_valid = true %}
          {% if (setting_month_enabled == 'unknown' or setting_month_enabled == 'unavailable' or setting_month_enabled == 'none' or setting_month_enabled == None) %}
          {%   set inputs_valid = true %}
          {% elif (setting_from_month == 'unknown' or setting_from_month == 'unavailable' or setting_from_month == 'none' or setting_from_month == None) %}
          {%   set inputs_valid = true %}
          {% elif (setting_to_month == 'unknown' or setting_to_month == 'unavailable' or setting_to_month == 'none' or setting_to_month == None) %}
          {%   set inputs_valid = true %}
          {% elif (setting_weekdays_enabled == 'unknown' or setting_weekdays_enabled == 'unavailable' or setting_weekdays_enabled == 'none' or setting_weekdays_enabled == None) %}
          {%   set inputs_valid = true %}
          {% elif (setting_hours_enabled == 'unknown' or setting_hours_enabled == 'unavailable' or setting_hours_enabled == 'none' or setting_hours_enabled == None) %}
          {%   set inputs_valid = true %}
          {% elif (setting_from_hour == 'unknown' or setting_from_hour == 'unavailable' or setting_from_hour == 'none' or setting_from_hour == None) %}
          {%   set inputs_valid = true %}
          {% elif (setting_to_hour == 'unknown' or setting_to_hour == 'unavailable' or setting_to_hour == 'none' or setting_to_hour == None) %}
          {%   set inputs_valid = true %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set setting_from_month = setting_from_month | int %}
          {%   set setting_to_month = setting_to_month | int %}
          {%   set setting_from_hour = setting_from_hour | int %}
          {%   set setting_to_hour = setting_to_hour | int %}
          {%   if (setting_month_enabled == 'on') %}
          {%     set correct_month = false %}
          {%     if (current_month >= setting_from_month or current_month <= setting_to_month) %}
          {%       set correct_month = true %}
          {%     endif %}
          {%   else %}
          {%     set correct_month = true %}
          {%   endif %}
          {%   if (setting_weekdays_enabled == 'on') %}
          {%     set correct_weekday = false %}
          {%     if (current_weekday == 0 and setting_weekday_monday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     elif (current_weekday == 1 and setting_weekday_tuesday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     elif (current_weekday == 2 and setting_weekday_wednesday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     elif (current_weekday == 3 and setting_weekday_thursday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     elif (current_weekday == 4 and setting_weekday_friday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     elif (current_weekday == 5 and setting_weekday_saturday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     elif (current_weekday == 6 and setting_weekday_sunday == 'on' ) %}
          {%        set correct_weekday = true %}
          {%     endif %}
          {%   else %}
          {%     set correct_weekday = true %}
          {%   endif %}
          {%   if (setting_hours_enabled == 'on') %}
          {%     set correct_hour = false %}
          {%     if (current_hour >= setting_from_hour and current_hour <= setting_to_hour) %}
          {%        set correct_hour = true %}
          {%     endif %}
          {%   else %}
          {%     set correct_hour = true %}
          {%   endif %}
          {%   if (correct_month == true and correct_weekday == true and correct_hour == true) %}
          {%     set result = 2 %}
          {%   else %}
          {%     set result = 1 %}
          {%   endif %}
          {% endif %}
          {{ result }}
