# This file includes all the entitites for tracking sensor data for the Balboa Spa Client add-on.

# The following are the consumptions for Denform Montana:
# - Heater: 3 kW.
# - Circulation pump: 0.2 kW + 0.1 kW for the ozone-device (that takes 0.2 kW, but we assume that the ozone-device is only running 50% of the time).
#
# Logic:
# - We utilize history_stat to increase time running over each hour, when binary sensor is true/on.
# - Based on increase time, we create energy sensor that with state_class 'total_increasing' to allow HA to capture energy correct.

# History stats is kept in the legacy format.
# We keep the names to 'entity_id' format.
# ---------------------------------------------------------
sensor:
  # We want to keep track of the time that the circulation pump has been running each hour (depends of course on polling).
  # We can utilize the binary sensor from the Balboa Spa Client integration.
  - platform: history_stats
    name: balboa_spa_circulationpump_running_time_hour
    entity_id: binary_sensor.nbp6013h_circ_pump
    state: 'on'
    type: time
    start: "{{ now().replace(minute=0, second=0) }}"
    end: "{{ now() }}"

   # We want to keep track of the time that the heater has been running each hour (depends of course on polling).
   # Since we cannot track attribute-state in history_stats, we need to utilize the binary template-sensor created below.
  - platform: history_stats
    name: balboa_spa_heater_running_time_hour
    entity_id: binary_sensor.balboa_spa_heater_on
    state: 'on'
    type: time
    start: "{{ now().replace(minute=0, second=0) }}"
    end: "{{ now() }}"

# Modern format.
# If required, utilize name, and set unique_id.
# ---------------------------------------------------------
template:
  - sensor:
      # We want to keep track of accumulated hourly consumption for the circulation pump.
      - name: Balboa Spa circulationpump consumption hour
        unique_id: balboa_spa_circulationpump_consumption_hour
        unit_of_measurement: 'kWh'
        device_class: energy
        state_class: total_increasing
        state: "{{ float(states('sensor.balboa_spa_circulationpump_running_time_hour'), 0) * 0.3 }}"

  - binary_sensor:
      # Since we cannot track attribute-state in history_stats, we need to create a binary template-sensor.
      # Returns true if
      - name:  Balboa Spa heater on
        unique_id: balboa_spa_heater_on
        device_class: heat
        state: "{{ is_state_attr('climate.nbp6013h_climate', 'hvac_action', 'heating') }}"

  - sensor:
      # We want to keep track of accumulated (hourly) consumption for the heater.
      - name: Balboa Spa heater consumption hour
        unique_id: balboa_spa_heater_consumption_hour
        unit_of_measurement: 'kWh'
        device_class: energy
        state_class: total_increasing
        state: "{{ float(states('sensor.balboa_spa_heater_running_time_hour'), 0) * 3 }}"

  - trigger:
      # Trigger at the end of every hour, since we want the sensor value to be set for the hour (since this is a state/event driven platform).
      - platform: time_pattern
        hours: "/1"
        minutes: "59"
        seconds: "59"
    sensor:
      # We set the cost for the circulation pump
      # We will therefore not capture the last second for the hour.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      - name: balboa_spa_circulationpump_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set consumption = states('sensor.balboa_spa_circulationpump_consumption_hour') %}
          {% set cost = states('sensor.electrical_distribution_consumption_rate_summary_sek') %}
          {% if (consumption == 'unknown' or consumption == 'unavailable') %}
          {%   set consumption = 0 %}
          {% else %}
          {%   set consumption = float(consumption) %}
          {% endif %}
          {% if (cost == 'unknown' or cost == 'unavailable') %}
          {%   set cost = 0 %}
          {% else %}
          {%   set cost = float(cost) %}
          {% endif %}
          {% set total_cost = (consumption * cost) | round(2) %}
          {{ total_cost }}
      # We set the cost for the heater
      # We will therefore not capture the last second for the hour.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      - name: balboa_spa_heater_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set consumption = states('sensor.balboa_spa_heater_consumption_hour') %}
          {% set cost = states('sensor.electrical_distribution_consumption_rate_summary_sek') %}
          {% if (consumption == 'unknown' or consumption == 'unavailable') %}
          {%   set consumption = 0 %}
          {% else %}
          {%   set consumption = float(consumption) %}
          {% endif %}
          {% if (cost == 'unknown' or cost == 'unavailable') %}
          {%   set cost = 0 %}
          {% else %}
          {%   set cost = float(cost) %}
          {% endif %}
          {% set total_cost = (consumption * cost) | round(2)  %}
          {{ total_cost }}
      # We set the cost for the  circulation pump and heater.
      # We will therefore not capture the last second for the hour.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      - name: balboa_spa_circulationpump_heater_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set consumption = states('sensor.balboa_spa_circulationpump_consumption_hour') %}
          {% set consumption2 = states('sensor.balboa_spa_heater_consumption_hour') %}
          {% set cost = states('sensor.electrical_distribution_consumption_rate_summary_sek') %}
          {% if (consumption == 'unknown' or consumption == 'unavailable') %}
          {%   set consumption = 0 %}
          {% else %}
          {%   set consumption = float(consumption) %}
          {% endif %}
          {% if (consumption2 == 'unknown' or consumption2 == 'unavailable') %}
          {%   set consumption2 = 0 %}
          {% else %}
          {%   set consumption2 = float(consumption2) %}
          {% endif %}
          {% if (cost == 'unknown' or cost == 'unavailable') %}
          {%   set cost = 0 %}
          {% else %}
          {%   set cost = float(cost) %}
          {% endif %}
          {% set total_cost = ((consumption + consumption2) * cost) | round(2)  %}
          {{ total_cost }}