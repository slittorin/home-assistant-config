# This file includes all the entitites for tracking sensor data for the Balboa Spa Client add-on.

# The following are the consumptions for Denform Montana:
# - Heater: 3 kW.
# - Circulation pump: 0.2 kW + 0.1 kW for the ozone-device (that takes 0.2 kW, but we assume that the ozone-device is only running 50% of the time).
#
# Logic:
# - We utilize history_stat to increase time running over each hour, when binary sensor is true/on.
# - Based on increase time, we create energy sensor that with state_class 'total_increasing' to allow HA to capture energy correct.

# Updates made for Core updates and breaking changes:
# --------------------------------------------------------
# 20221108 - Clear to upgrade to 2022.6.7 from 2022.5.3: https://www.home-assistant.io/blog/2022/06/01/release-20226/#breaking-changes Template filter/function defaults

input_number:
  test_balboa_spa_temperature_persistent:
    name: 'Persistence for balboa_spa_temperature'
    icon: mdi:thermometer-lines
    mode: box
    min: 0
    max: 100
    unit_of_measurement: '°C'
  test_balboa_spa_temperature_hour_persistent:
    name: 'Persistence for balboa_spa_temperature'
    icon: mdi:thermometer-lines
    mode: box
    min: 0
    max: 100
    unit_of_measurement: '°C'
  test_balboa_spa_temperature_change_per_hour_persistent:
    name: 'Persistence for test_balboa_spa_temperature_change_per_hour'
    icon: mdi:thermometer-lines
    mode: box
    min: -100
    max: 100
    unit_of_measurement: '°C'
#  test_balboa_spa_temperature_change_per_hour_persistent_timedelta:
#    name: 'Persistence for test_balboa_spa_temperature_change_per_hour_timedelta'
#    icon: mdi:thermometer-lines
#    mode: box
#    min: -100
#    max: 100
#  test_balboa_spa_temperature_change_per_hour_persistent_tempdelta:
#    name: 'Persistence for test_balboa_spa_temperature_change_per_hour_tempdelta'
#    icon: mdi:thermometer-lines
#    mode: box
#    min: -10000000
#    max: 100000000
#    unit_of_measurement: '°C'


input_text:
  balboa_spa_temperature_sensor:
    name: 'Name of sensor for spa temperatures (full name)'
    icon: mdi:thermometer-lines


sensor:
  # We want to keep track of the time that the circulation pump has been running each hour (depends of course on polling).
  # We can utilize the binary sensor from the Balboa Spa Client integration.
  - platform: history_stats
    name: balboa_spa_circulationpump_running_time_hour
    entity_id: binary_sensor.nbp6013h_circ_pump
    state: 'on'
    type: time
    start: "{{ now().replace(minute=0, second=0) }}"
    end: "{{ now() }}"

   # We want to keep track of the time that the heater has been running each hour (depends of course on polling).
   # Since we cannot track attribute-state in history_stats, we need to utilize the binary template-sensor created below.
  - platform: history_stats
    name: balboa_spa_heater_running_time_hour
    entity_id: binary_sensor.balboa_spa_heater_on
    state: 'on'
    type: time
    start: "{{ now().replace(minute=0, second=0) }}"
    end: "{{ now() }}"


template:
  - sensor:
      # We want to keep track of accumulated hourly consumption for the circulation pump.
      - name: Balboa Spa circulationpump consumption hour
        unique_id: balboa_spa_circulationpump_consumption_hour
        unit_of_measurement: 'kWh'
        device_class: energy
        state_class: total_increasing
        state: "{{ float(states('sensor.balboa_spa_circulationpump_running_time_hour'), 0) * 0.3 }}"

  - binary_sensor:
      # Since we cannot track attribute-state in history_stats, we need to create a binary template-sensor.
      # Returns true if
      - name:  Balboa Spa heater on
        unique_id: balboa_spa_heater_on
        device_class: heat
        state: "{{ is_state_attr('climate.nbp6013h_climate', 'hvac_action', 'heating') }}"

  - sensor:
      # We want to keep track of accumulated (hourly) consumption for the heater.
      - name: Balboa Spa heater consumption hour
        unique_id: balboa_spa_heater_consumption_hour
        unit_of_measurement: 'kWh'
        device_class: energy
        state_class: total_increasing
        state: "{{ float(states('sensor.balboa_spa_heater_running_time_hour'), 0) * 3 }}"

  - sensor:
      # We want to keep track of accumulated (hourly) consumption for the circulation pump and heater.
      # Sometimes HA seems to not add entities when the name and unique_id is not the same, and this 'sticks' in the system.
      # Therefore we split circulation and pump.
      - name: Balboa Spa circulation pump heater consumption hour
        unique_id: balboa_spa_circulation_pump_heater_consumption_hour
        unit_of_measurement: 'kWh'
        device_class: energy
        state_class: total_increasing
        state: "{{ float((float(states('sensor.balboa_spa_circulationpump_running_time_hour'), 0) * 0.3) + (float(states('sensor.balboa_spa_heater_running_time_hour'), 0) * 3.0)) }}"

  - sensor:
      # We define the delta change in degrees per hour, since last change of temperature.
      # Updates are managed as automation, as template sensor does not work well with relying on several other sensors and their updates (caught by the template engine).
#      - name: Test Balboa Spa temperature delta change
#        unique_id: test_balboa_spa_temperature_delta_change
#        state_class: measurement
#        device_class: 'temperature'
#        unit_of_measurement: '°C'
#        icon: mdi:thermometer-lines
#        state: >
#           {{ 0 }}
#          {% set time_from = states.sensor['test_balboa_spa_temperature'].last_updated %}
#          {% set time_now = now().timestamp() %}
#          {% set temp_from = states('sensor.test_balboa_spa_temperature') %}
#          {% set temp_from_persistent = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set temp_now = state_attr(states('input_text.balboa_spa_temperature_sensor'), 'current_temperature') %}
#          {% set inputs_valid = true %}
#          {% set result = 0 %}
#          {% if (time_from == 'unknown' or time_from == 'unavailable' or time_from == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set time_from = as_timestamp(time_from) %}
#          {% endif %}
#          {% if (temp_from == 'unknown' or temp_from == 'unavailable' or temp_from == none) %}
#          {%   if (temp_from_persistent == 'unknown' or temp_from_persistent == 'unavailable' or temp_from_persistent == none or temp_from_persistent == 0) %}
#          {%     set inputs_valid = false %}
#          {%   else %}
#          {%     set temp_from = float(temp_from_persistent, 0) %}
#          {%   endif %}
#          {% else %}
#          {%   set temp_from = float(temp_from, 0) %}
#          {% endif %}
#          {% if (temp_now == 'unknown' or temp_now == 'unavailable' or temp_now == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temp_now = float(temp_now, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set delta_time = ((time_now - time_from) / 3600) %}
#          {%   set delta_temp = temp_now - temp_from %}
#          {%   set result = ((delta_temp) / (delta_time)) | float(2, default=0) %}
#          {% endif %}
#          {{ result }}
#      - name: Test Balboa Spa temperature delta change time
#        unique_id: test_balboa_spa_temperature_delta_change_time
#        state_class: measurement
#        device_class: 'temperature'
#        unit_of_measurement: '°C'
#        icon: mdi:thermometer-lines
#        state: >
#          {% set time_from = states.sensor['test_balboa_spa_temperature'].last_updated %}
#          {% set time_now = now().timestamp() %}
#          {% set temp_from = states('sensor.test_balboa_spa_temperature') %}
#          {% set temp_from_persistent = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set temp_now = state_attr(states('input_text.balboa_spa_temperature_sensor'), 'current_temperature') %}
#          {% set inputs_valid = true %}
#          {% set result = 0 %}
#          {% if (time_from == 'unknown' or time_from == 'unavailable' or time_from == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set time_from = as_timestamp(time_from) %}
#          {% endif %}
#          {% if (temp_from == 'unknown' or temp_from == 'unavailable' or temp_from == none) %}
#          {%   if (temp_from_persistent == 'unknown' or temp_from_persistent == 'unavailable' or temp_from_persistent == none or temp_from_persistent == 0) %}
#          {%     set inputs_valid = false %}
#          {%   else %}
#          {%     set temp_from = float(temp_from_persistent, 0) %}
#          {%   endif %}
#          {% else %}
#          {%   set temp_from = float(temp_from, 0) %}
#          {% endif %}
#          {% if (temp_now == 'unknown' or temp_now == 'unavailable' or temp_now == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temp_now = float(temp_now, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set delta_time = ((time_now - time_from) / 3600) %}
#          {%   set result = delta_time %}
#          {% endif %}
#          {{ result }}
#      - name: Test Balboa Spa temperature delta change temp
#        unique_id: test_balboa_spa_temperature_delta_change_temp
#        state_class: measurement
#        device_class: 'temperature'
#        unit_of_measurement: '°C'
#        icon: mdi:thermometer-lines
#        state: >
#          {% set time_from = states.sensor['test_balboa_spa_temperature'].last_updated %}
#          {% set time_now = now().timestamp() %}
#          {% set temp_from = states('sensor.test_balboa_spa_temperature') %}
#          {% set temp_from_persistent = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set temp_now = state_attr(states('input_text.balboa_spa_temperature_sensor'), 'current_temperature') %}
#          {% set inputs_valid = true %}
#          {% set result = 0 %}
#          {% if (time_from == 'unknown' or time_from == 'unavailable' or time_from == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set time_from = as_timestamp(time_from) %}
#          {% endif %}
#          {% if (temp_from == 'unknown' or temp_from == 'unavailable' or temp_from == none) %}
#          {%   if (temp_from_persistent == 'unknown' or temp_from_persistent == 'unavailable' or temp_from_persistent == none or temp_from_persistent == 0) %}
#          {%     set inputs_valid = false %}
#          {%   else %}
#          {%     set temp_from = float(temp_from_persistent, 0) %}
#          {%   endif %}
#          {% else %}
#          {%   set temp_from = float(temp_from, 0) %}
#          {% endif %}
#          {% if (temp_now == 'unknown' or temp_now == 'unavailable' or temp_now == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temp_now = float(temp_now, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set delta_temp = temp_now - temp_from %}
#          {%   set result = delta_temp %}
#          {% endif %}
#          {{ result }}

  - sensor:
      # We set the spa temperature sensor.
      - name: Test Balboa Spa temperature
        unique_id: test_balboa_spa_temperature
        state_class: measurement
        device_class: 'temperature'
        unit_of_measurement: '°C'
        icon: mdi:thermometer-lines
        state: >
          {% set temperature = state_attr(states('input_text.balboa_spa_temperature_sensor'), 'current_temperature') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (temperature == 'unknown' or temperature == 'unavailable' or temperature == none) %}
          {%   set inputs_valid = false %}
          {% else %}
          {%   set temperature = float(temperature, 0) %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set result = temperature | round(1, default=0) %}
          {% endif %}
          {{ result }}
#  - sensor:
#      # We set the test_balboa_spa_temperature_change_per_hour, from input_number.
#      - name: Test Balboa Spa temperature change per hour
#        unique_id: test_balboa_spa_temperature_change_per_hour
#        state_class: measurement
#        device_class: 'temperature'
#        unit_of_measurement: '°C'
#        icon: mdi:thermometer-lines
#        state: >
#          {% set temperature = states('input_number.test_balboa_spa_temperature_change_per_hour_persistent') %}
#          {% set inputs_valid = true %}
#          {% set result = none %}
#          {% if (temperature == 'unknown' or temperature == 'unavailable' or temperature == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temperature = float(temperature, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set result = temperature | round(1, default=0) %}
#          {% endif %}
#          {{ result }}


  - trigger:
      # Trigger at the end of every hour, since we want the sensor value to be set for the hour (since this is a state/event driven platform).
      # 20221024: Changed from 59.59 to 59.58 to allow some further yaml to be executed 59.59 each hour.
      # 20230102: Changed from 59.58 to 59.56 to further add space before 59.58 each hour.
      - platform: time_pattern
        hours: "/1"
        minutes: "59"
        seconds: "56"
    sensor:
      # We set the cost for the circulation pump
      # We will therefore not capture the last second for the hour.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      - name: balboa_spa_circulationpump_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set consumption = states('sensor.balboa_spa_circulationpump_consumption_hour') %}
          {% set cost = states('sensor.electrical_distribution_consumption_rate_summary_sek') %}
          {% if (consumption == 'unknown' or consumption == 'unavailable') %}
          {%   set consumption = 0 %}
          {% else %}
          {%   set consumption = float(consumption, 0) %}
          {% endif %}
          {% if (cost == 'unknown' or cost == 'unavailable') %}
          {%   set cost = 0 %}
          {% else %}
          {%   set cost = float(cost, 0) %}
          {% endif %}
          {% set total_cost = (consumption * cost) | round(2, default=0) %}
          {{ total_cost }}
      # We set the cost for the heater
      # We will therefore not capture the last second for the hour.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      - name: balboa_spa_heater_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set consumption = states('sensor.balboa_spa_heater_consumption_hour') %}
          {% set cost = states('sensor.electrical_distribution_consumption_rate_summary_sek') %}
          {% if (consumption == 'unknown' or consumption == 'unavailable') %}
          {%   set consumption = 0 %}
          {% else %}
          {%   set consumption = float(consumption, 0) %}
          {% endif %}
          {% if (cost == 'unknown' or cost == 'unavailable') %}
          {%   set cost = 0 %}
          {% else %}
          {%   set cost = float(cost, 0) %}
          {% endif %}
          {% set total_cost = (consumption * cost) | round(2, default=0)  %}
          {{ total_cost }}
      # We set the cost for the  circulation pump and heater.
      # We will therefore not capture the last second for the hour.
      # This however means that the hourly consumption will differ a bit, but we never stated that this was a precise sensor ;)
      - name: balboa_spa_circulationpump_heater_cost_hour
        device_class: 'monetary'
        unit_of_measurement: 'SEK'
        state_class: measurement
        state: >
          {% set consumption = states('sensor.balboa_spa_circulationpump_consumption_hour') %}
          {% set consumption2 = states('sensor.balboa_spa_heater_consumption_hour') %}
          {% set cost = states('sensor.electrical_distribution_consumption_rate_summary_sek') %}
          {% if (consumption == 'unknown' or consumption == 'unavailable') %}
          {%   set consumption = 0 %}
          {% else %}
          {%   set consumption = float(consumption, 0) %}
          {% endif %}
          {% if (consumption2 == 'unknown' or consumption2 == 'unavailable') %}
          {%   set consumption2 = 0 %}
          {% else %}
          {%   set consumption2 = float(consumption2, 0) %}
          {% endif %}
          {% if (cost == 'unknown' or cost == 'unavailable') %}
          {%   set cost = 0 %}
          {% else %}
          {%   set cost = float(cost, 0) %}
          {% endif %}
          {% set total_cost = ((consumption + consumption2) * cost) | round(2, default=0)  %}
          {{ total_cost }}
      # We set the hourly spa temperature.
      - name: test_balboa_spa_temperature_hour
        device_class: 'temperature'
        unit_of_measurement: '°C'
        state_class: measurement
        state: >
          {% set temperature = state_attr(states('input_text.balboa_spa_temperature_sensor'), 'current_temperature') %}
          {% set inputs_valid = true %}
          {% set result = none %}
          {% if (temperature == 'unknown' or temperature == 'unavailable' or temperature == none) %}
          {%   set inputs_valid = false %}
          {% else %}
          {%   set temperature = float(temperature, 0) %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set result = temperature | round(1, default=0) %}
          {% endif %}
          {{ result }}
#      # We set the temperature change from the last hour.
#      - name: Test Balboa Spa temperature change last hour2
#        unique_id: test_balboa_spa_temperature_change_per_hour2
#        state_class: measurement
#        device_class: 'temperature'
#        unit_of_measurement: '°C'
#        icon: mdi:thermometer-lines
#        state: >
#          {% set time_from = states.input_number['test_balboa_spa_temperature_persistent'].last_updated %}
#          {% set time_now = now().timestamp() %}
#          {% set temp_from = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set temp_now = states('sensor.test_balboa_spa_temperature') %}
#          {% set inputs_valid = true %}
#          {% set result = none %}
#          {% if (temperature_last_hour == 'unknown' or temperature_last_hour == 'unavailable' or temperature_last_hour == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temperature_last_hour = float(temperature_last_hour, 0) %}
#          {% endif %}
#          {% if (temperature == 'unknown' or temperature == 'unavailable' or temperature == none) %}
#          {%   if (temperature_persistent == 'unknown' or temperature_persistent == 'unavailable' or temperature_persistent == none) %}
#          {%     set inputs_valid = false %}
#          {%   else %}
#          {%     set temperature = float(temperature_persistent, 0) %}
#          {%   endif %}
#          {% else %}
#          {%   set temperature = float(temperature, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set result = (temperature_last_hour - temperature) | round(2, default=0) %}
#          {% endif %}
#          {{ result }}
#      # We lastly set the temperature state for the end of the hour.
#      - name: Test Balboa Spa temperature last hour
#        unique_id: test_balboa_spa_temperature_last_hour
#        state_class: measurement
#        device_class: 'temperature'
#        unit_of_measurement: '°C'
#        icon: mdi:thermometer-lines
#        state: >
#          {% set temperature = state_attr(states('input_text.balboa_spa_temperature_sensor'), 'current_temperature') %}
#          {% set temperature_persistent = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set inputs_valid = true %}
#          {% set result = none %}
#          {% if (temperature == 'unknown' or temperature == 'unavailable' or temperature == none) %}
#          {%   if (temperature_persistent == 'unknown' or temperature_persistent == 'unavailable' or temperature_persistent == none) %}
#          {%     set inputs_valid = false %}
#          {%   else %}
#          {%     set temperature = float(temperature_persistent, 0) %}
#          {%   endif %}
#          {% else %}
#          {%   set temperature = float(temperature, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set result = temperature | round(1, default=0) %}
#          {% endif %}
#          {{ result }}

automation:
  # This is not really persistence.
  # Since I could not get template sensor to work properly, we instead set an input_number, and from that we can derive to a proper sensor.
  # Note that we need to have delimiting, as the data from the Spa can give wild results, specifically when data is updated in short timeframes (second and minutes).
  # - It should be physically impossible to increase the temperature over 3 degrees per hour.
  # - It should be physically impossible to decrease the temperature over 7 degrees per hour. Only if the spa is uncovered, and in minus celcius.
  - id: automation_test_balboa_spa_temperature_change_per_hour
    alias: 'Automation for test_balboa_spa_temperature_delta_change'
    trigger:
      - platform: state
        entity_id: sensor.test_balboa_spa_temperature
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.test_balboa_spa_temperature_change_per_hour_persistent
        value: >
          {% set time_from = states.input_number['test_balboa_spa_temperature_hour_persistent'].last_updated %}
          {% set time_now = now().timestamp() %}
          {% set temp_from = states('input_number.test_balboa_spa_temperature_hour_persistent') %}
          {% set temp_now = states('sensor.test_balboa_spa_temperature_hour') %}
          {% set inputs_valid = true %}
          {% set result = 0 %}
          {% if (time_from == 'unknown' or time_from == 'unavailable' or time_from == none) %}
          {%   set inputs_valid = false %}
          {% else %}
          {%   set time_from = as_timestamp(time_from) %}
          {% endif %}
          {% if (temp_from == 'unknown' or temp_from == 'unavailable' or temp_from == none) %}
          {%    set inputs_valid = false %}
          {% else %}
          {%   set temp_from = float(temp_from, 0) %}
          {% endif %}
          {% if (temp_now == 'unknown' or temp_now == 'unavailable' or temp_now == none) %}
          {%   set inputs_valid = false %}
          {% else %}
          {%   set temp_now = float(temp_now, 0) %}
          {% endif %}
          {% if (inputs_valid == true) %}
          {%   set delta_time = ((time_now - time_from) / 3600) %}
          {%   set delta_temp = temp_now - temp_from %}
          {%   set result = (delta_temp / delta_time) %}
          {%   if (result >= 3) %}
          {%     set result = 0 %}
          {%   elif (result <= -7) %}
          {%     set result = 0 %}
          {%   endif %}
          {% endif %}
          {{ float(result, 0) }}
#  - id: automation_test_balboa_spa_temperature_change_per_hour_timedelta
#    alias: 'Automation for test_balboa_spa_temperature_delta_change'
#    trigger:
#      - platform: state
#        entity_id: sensor.test_balboa_spa_temperature
#    action:
#      service: input_number.set_value
#      data_template:
#        entity_id: input_number.test_balboa_spa_temperature_change_per_hour_persistent_timedelta
#        value: >
#          {% set time_from = states.input_number['test_balboa_spa_temperature_persistent'].last_updated %}
#          {% set time_now = now().timestamp() %}
#          {% set temp_from = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set temp_now = states('sensor.test_balboa_spa_temperature') %}
#          {% set inputs_valid = true %}
#          {% set result = 0 %}
#          {% if (time_from == 'unknown' or time_from == 'unavailable' or time_from == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set time_from = as_timestamp(time_from) %}
#          {% endif %}
#          {% if (temp_from == 'unknown' or temp_from == 'unavailable' or temp_from == none) %}
#          {%    set inputs_valid = false %}
#          {% else %}
#          {%   set temp_from = float(temp_from, 0) %}
#          {% endif %}
#          {% if (temp_now == 'unknown' or temp_now == 'unavailable' or temp_now == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temp_now = float(temp_now, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set delta_time = ((time_now - time_from) / 3600) %}
#          {%   set result = delta_time %}
#          {% endif %}
#          {{ float(result, 0) }}
#  - id: automation_test_balboa_spa_temperature_change_per_hour_tempdelta
#    alias: 'Automation for test_balboa_spa_temperature_delta_change'
#    trigger:
#      - platform: state
#        entity_id: sensor.test_balboa_spa_temperature
#    action:
#      service: input_number.set_value
#      data_template:
#        entity_id: input_number.test_balboa_spa_temperature_change_per_hour_persistent_tempdelta
#        value: >
#          {% set time_from = states.input_number['test_balboa_spa_temperature_persistent'].last_updated %}
#          {% set time_now = now().timestamp() %}
#          {% set temp_from = states('input_number.test_balboa_spa_temperature_persistent') %}
#          {% set temp_now = states('sensor.test_balboa_spa_temperature') %}
#          {% set inputs_valid = true %}
#          {% set result = 0 %}
#          {% if (time_from == 'unknown' or time_from == 'unavailable' or time_from == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set time_from = as_timestamp(time_from) %}
#          {% endif %}
#          {% if (temp_from == 'unknown' or temp_from == 'unavailable' or temp_from == none) %}
#          {%    set inputs_valid = false %}
#          {% else %}
#          {%   set temp_from = float(temp_from, 0) %}
#          {% endif %}
#          {% if (temp_now == 'unknown' or temp_now == 'unavailable' or temp_now == none) %}
#          {%   set inputs_valid = false %}
#          {% else %}
#          {%   set temp_now = float(temp_now, 0) %}
#          {% endif %}
#          {% if (inputs_valid == true) %}
#          {%   set delta_temp = temp_now - temp_from %}
#          {%   set result = delta_temp %}
#          {% endif %}
#          {{ float(result, 0) }}
  # For persistence, and spa temperature
  - id: automation_test_balboa_spa_temperature
    alias: 'Automation for persistance of test_balboa_spa_temperature change'
    trigger:
      - platform: state
        entity_id: sensor.test_balboa_spa_temperature
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.test_balboa_spa_temperature_persistent
        value: "{{ states('sensor.test_balboa_spa_temperature') }}"
  # For persistence, and spa hourly temperature
  - id: automation_test_balboa_spa_temperature_hour
    alias: 'Automation for persistance of test_balboa_spa_temperature_hour change'
    trigger:
      - platform: state
        entity_id: sensor.test_balboa_spa_temperature_hour
    action:
      service: input_number.set_value
      data_template:
        entity_id: input_number.test_balboa_spa_temperature_hour_persistent
        value: "{{ states('sensor.test_balboa_spa_temperature_hour') }}"